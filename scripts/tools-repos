#!/usr/bin/env bash

### START Bash strict mode
# shellcheck disable=SC2154
([[ -n ${ZSH_EVAL_CONTEXT} && ${ZSH_EVAL_CONTEXT} =~ :file$ ]] ||
  [[ -n ${BASH_VERSION} ]] && (return 0 2>/dev/null)) && SOURCED=true || SOURCED=false
if ! ${SOURCED}; then
  set -o errexit  # same as set -e
  set -o nounset  # same as set -u
  set -o errtrace # same as set -E
  set -o pipefail
  set -o posix
  #set -o xtrace # same as set -x, turn on for debugging

  shopt -s extdebug
  IFS=$(printf '\n\t')
fi
### END Bash strict mode

###################################################################################################
### START Script template bootstrap

function initialize() {
  g_script_name=$(basename "${BASH_SOURCE[0]}")
  g_script_dir="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"

  g_short_options=""
  g_long_options=""
  g_positional_arguments=""
}

function cleanup_vars() {
  unset g_script_name
  unset g_script_dir

  unset g_short_options
  unset g_long_options
  unset g_positional_arguments

  unset g_script_author
  unset g_script_license
  unset g_script_version
  unset g_script_date

  cleanup_script_vars
}

function load_script_tools() {
  local dotfiles
  dotfiles="${DOTFILES:-$(xdg-user-dir DOTFILES)}"
  # Source script-tools.bash
  if [[ -f "${dotfiles}/bash/script-tools.bash" ]]; then
    # shellcheck source=/home/brennan/.dotfiles-rc/bash/script-tools.bash
    source "${dotfiles}/bash/script-tools.bash"
  fi
}

function show_version() {
  print_out "Application: ${g_script_name}"
  print_out "Author: ${g_script_author} --- License: ${g_script_license}"
  print_out "Version: ${g_script_version} --- Date: ${g_script_date}"
  print_blank_line
}

function show_help() {
  show_version
  print_help
}

function set_short_options() {
  g_short_options="$1"
}

function set_long_options() {
  g_long_options="$1"
}

function process_arguments() {
  local args
  set +o errexit # temporarily turn off error on exit
  args=$(getopt --name "${g_script_name}" --options "${g_short_options}hv" \
    --longoptions "${g_long_options},help,version" -- "$@")
  # Handle if getopt returned an error
  # shellcheck disable=SC2181
  if [[ $? -gt 0 ]]; then
    show_help
    exit 1
  fi
  set -o errexit # turn error on exit back on

  eval set -- "${args}"

  ## Handle the required options, help & version, bypass everything else
  local flags=("$@")
  local i=0
  while [[ "$i" -lt "${#flags[@]}" ]]; do
    local flag=${flags[i]}
    if [[ "${flag}" == "-h" || "${flag}" == "--help" ]]; then
      show_help
      exit 0
    elif [[ "${flag}" == "-v" || "${flag}" == "--version" ]]; then
      show_version
      exit 0
    elif [[ "${flag}" == "--" ]]; then
      break
    fi
    i=$((i + 1))
  done

  # Split up the flags and positionals
  local flags=() positional_arguments=()
  local reached_positionals=0
  while [[ $# -gt 0 ]]; do
    if [[ "$1" == "--" ]]; then
      reached_positionals=1
      shift
    else
      if [[ "${reached_positionals}" -eq 1 ]]; then
        positional_arguments+=("$1")
        shift
      else
        flags+=("$1")
        shift
      fi
    fi
  done

  process_flags "${flags[@]}"
  g_positional_arguments=("${positional_arguments[@]}")
}

## USAGE: First parameter should be the number of expected (required) positional arguments.
## Optionally, you can pass in a second argument to customize the error message.
function validate_number_of_positional_arguments() {
  local expected_arguments=$1
  local error_msg="${2:-Invalid number of arguments, expected at least ${expected_arguments}.}"

  if [[ "${#g_positional_arguments[@]}" -lt ${expected_arguments} ]]; then
    print_error "${error_msg}"
    show_help
    exit 1
  fi
}

function main_handler() {
  initialize
  load_script_tools
  setup_script_vars
  setup_options
  process_arguments "$@"
  main "${g_positional_arguments[@]}"
  cleanup_vars
}

### END Script template bootstrap
###################################################################################################

## USAGE: If you want any global variables, set them up here
function setup_script_vars() {
  # Must be set here
  g_script_author="Brennan Fee"
  g_script_license="MIT License"
  g_script_version="0.2"
  g_script_date="2025-06-10"

  # Add others here
  g_distro="$(lsb_release -is 2>/dev/null | tr "[:upper:]" "[:lower:]")"
  g_distro_codename="$(lsb_release -cs 2>/dev/null)"

  g_force="false"
  g_include_dev_tools="false"
  g_desktop_environment="none"
}

## USAGE: If you add any global variables, clean them up in this method
function cleanup_script_vars() {
  unset g_distro
  unset g_distro_codename

  unset g_force
  unset g_include_dev_tools
  unset g_desktop_environment
}

## USAGE: If you need to add any command-line flags or options, do it here.
## You should call one or both of the helper methods set_short_options or
## set_long_options.  They accept a string with syntax that is the same for
## the getopt program.  See it's help for more information.
function setup_options() {
  set_short_options "dfe:"
  set_long_options "include-dev,force,desktop-environment:"
}

## Usage: If you added command-line flags or options using setup_options,
## process them here.  The flags and their values will be passed as an array
## directly into this method so you can process them however you wish,
## including using 'shift' as you loop.
function process_flags() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
    '-d' | '--include-dev')
      g_include_dev_tools="true"
      shift
      ;;
    '-f' | '--force')
      g_force="true"
      shift
      ;;
    '-e' | '--desktop-environment')
      g_desktop_environment=$(echo "$2" | tr "[:upper:]" "[:lower:]")
      shift 2
      ;;
    '--')
      shift
      break
      ;;
    *)
      throw_error_msg "Unknown option: $1"
      ;;
    esac
  done
}

## USAGE: Construct your help screen text here.
function print_help() {
  print_out "  ${g_script_name} [options]"
  print_blank_line
  print_out "This script sets up a few key Debian third-party repositories the"
  print_out "'proper' way (using a signing key)."
  print_blank_line
  print_out "Options:"
  print_blank_line
  print_out "  -h or --help"
  print_out "      Show this help screen."
  print_blank_line
  print_out "  -v or --version"
  print_out "     Show the version number."
  print_blank_line
  print_out "  -d or --include-dev"
  print_out "     Also install the tools for a development environment."
  print_blank_line
  print_out "  -e or --desktop-environment"
  print_out "     The desktop environment being installed to. This might produce differences in the packages"
  print_out "     beign installed.  Valid values are 'none', 'kde', 'gnome', 'mate', and 'tiling'."
  print_blank_line
  print_out "  -f or --force"
  print_out "     Removes all current repos, keys, and re-installs all the repos."
  print_blank_line
}

function is_a_desktop() {
  if [[ "${g_desktop_environment}" == 'none' && "${g_desktop_environment}" == 'server' ]]; then
    return 1
  else
    return 0
  fi
}

function prepare() {
  sudo mkdir -p /etc/apt/keyrings

  DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q update

  DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q install ca-certificates curl gnupg
}

function clean_if_forced() {
  sudo rm -f /etc/apt/sources.list.d/*.list
  sudo rm -f /etc/apt/keyrings/*.gpg
  sudo rm -f /etc/apt/keyrings/*.asc
}

function install_debian_backports_repo() {
  local listFile="/etc/apt/sources.list.d/debian-backports.list"
  local repoStatement="https://deb.debian.org/debian ${g_distro_codename}-backports "
  repoStatement+="main contrib non-free non-free-firmware"

  if [[ ! -f "${listFile}" ]]; then
    print_out "  Installing debian backports repo"
    echo "deb ${repoStatement}" | sudo tee "${listFile}" >/dev/null
  fi
}

function install_if_needed() {
  local product="${1}"
  local listFile="${2}"
  local keyFile="${3}"
  local keyUrl="${4}"
  local repoStatement="${5}"
  local dearmorKey="${6:-false}"

  if [[ ! -f "${listFile}" ]]; then
    print_out "  Installing ${product} repo"
    # key file
    if [[ "${dearmorKey}" == "true" ]]; then
      curl -fsSL "${keyUrl}" | sudo gpg --dearmor --yes --output "${keyFile}"
    else
      sudo curl -fsSLo "${keyFile}" "${keyUrl}"
    fi
    # list file
    echo "deb [arch=$(dpkg --print-architecture) signed-by=${keyFile}] ${repoStatement}" |
      sudo tee "${listFile}" >/dev/null
  fi
}

function install_mullvad_repo() {
  local listFile="/etc/apt/sources.list.d/mullvad.list"
  local keyFile="/etc/apt/keyrings/mullvad-keyring.asc"
  local keyUrl="https://repository.mullvad.net/deb/mullvad-keyring.asc"
  local repoStatement="https://repository.mullvad.net/deb/stable ${g_distro_codename} main"

  install_if_needed "Mullvad" "${listFile}" "${keyFile}" "${keyUrl}" "${repoStatement}" false
}

function install_netbird_repo() {
  local listFile="/etc/apt/sources.list.d/netbird.list"
  local keyFile="/etc/apt/keyrings/netbird-archive-keyring.gpg"
  local keyUrl="https://pkgs.netbird.io/debian/public.key"
  local repoStatement="https://pkgs.netbird.io/${g_distro} stable main"

  install_if_needed "Netbird" "${listFile}" "${keyFile}" "${keyUrl}" "${repoStatement}" true
}

function install_beyondCompare_repo() {
  local listFile="/etc/apt/sources.list.d/scootersoftware.list"
  local keyFile="/etc/apt/keyrings/scootersoftware.asc"
  local keyUrl="https://www.scootersoftware.com/DEB-GPG-KEY-scootersoftware.asc"
  local repoStatement="https://www.scootersoftware.com/${g_distro} bcompare5 non-free"

  sudo touch /etc/default/bcompare

  install_if_needed "Beyond Compare" "${listFile}" "${keyFile}" "${keyUrl}" "${repoStatement}" false
}

function install_insync_repo() {
  local listFile="/etc/apt/sources.list.d/insync.list"
  local keyFile="/etc/apt/keyrings/insync.gpg"
  local keyUrl="https://apt.insync.io/insynchq.gpg"
  local repoStatement="http://apt.insync.io/${g_distro} ${g_distro_codename} non-free contrib"

  install_if_needed "Insync" "${listFile}" "${keyFile}" "${keyUrl}" "${repoStatement}" true
}

function install_vsCode_repo() {
  local listFile="/etc/apt/sources.list.d/vscode.list"
  local keyFile="/etc/apt/keyrings/microsoft.asc"
  local keyUrl="https://packages.microsoft.com/keys/microsoft.asc"
  local repoStatement="https://packages.microsoft.com/repos/code stable main"

  echo "code code/add-microsoft-repo boolean false" | sudo debconf-set-selections

  install_if_needed "VS Code" "${listFile}" "${keyFile}" "${keyUrl}" "${repoStatement}" false
}

function install_virtualbox_repo() {
  local listFile="/etc/apt/sources.list.d/virtualbox.list"
  local keyFile="/etc/apt/keyrings/oracle-virtualbox-2016.gpg"
  local keyUrl="https://www.virtualbox.org/download/oracle_vbox_2016.asc"
  local repoStatement="https://download.virtualbox.org/virtualbox/${g_distro} ${g_distro_codename} contrib"

  # sudo apt-key remove 5CDFA2F683C52980AECF
  # sudo apt-key remove D9C954422A4B98AB5139

  echo "virtualbox virtualbox/module-compilation-allowed boolean true" | sudo debconf-set-selections
  echo "virtualbox virtualbox/delete-old-modules boolean true" | sudo debconf-set-selections

  install_if_needed "Virtualbox" "${listFile}" "${keyFile}" "${keyUrl}" "${repoStatement}" true
}

function install_common_repos() {
  # For all machines
  install_debian_backports_repo
  install_mullvad_repo
  install_netbird_repo
  install_insync_repo

  # Only for desktops...
  if is_a_desktop; then
    install_beyondCompare_repo
    install_vsCode_repo
  fi
}

function install_dev_repos() {
  if [[ ! "${g_include_dev_tools}" == "true" ]]; then
    return
  fi

  if is_a_desktop; then
    install_virtualbox_repo
  fi
}

function install_common_tools() {
  DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q install mullvad-vpn netbird

  if is_a_desktop; then
    # Common to all desktops
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q install netbird-ui bcompare code
  fi

  # For specific desktops
  case "${g_desktop_environment}" in
  "none" | "server")
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q install insync-headless
    ;;
  "kde")
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q install insync-dolphin
    ;;
  "gnome")
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q install insync-nautilus
    ;;
  "mate")
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q install insync-caja
    ;;
  "tiling")
    ## Don't know which gui file manager I would use, do nothing for now
    true
    ;;
  *)
    print_warning "Unknown desktop environment requested."
    ;;
  esac
}

function install_dev_tools() {
  if [[ ! "${g_include_dev_tools}" == "true" ]]; then
    return
  fi

  if is_a_desktop; then
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q install virtualbox-7.1
  fi
}

## Your main implementation goes here.  All of the positional arguments have
## been passed as an array to this function.
function main() {
  prepare
  clean_if_forced

  install_common_repos
  install_dev_repos

  DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q update

  install_common_tools
  install_dev_tools
}

## This must be the last line
main_handler "$@"
