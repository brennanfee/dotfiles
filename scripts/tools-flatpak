#!/usr/bin/env bash
#
# Page to look for apps to install: https://flathub.org
#

### START Bash strict mode
# shellcheck disable=SC2154
([[ -n ${ZSH_EVAL_CONTEXT} && ${ZSH_EVAL_CONTEXT} =~ :file$ ]] ||
  [[ -n ${BASH_VERSION} ]] && (return 0 2>/dev/null)) && SOURCED=true || SOURCED=false
if ! ${SOURCED}; then
  set -o errexit  # same as set -e
  set -o nounset  # same as set -u
  set -o errtrace # same as set -E
  set -o pipefail
  set -o posix
  #set -o xtrace # same as set -x, turn on for debugging

  shopt -s extdebug
  IFS=$(printf '\n\t')
fi
### END Bash strict mode

###################################################################################################
### START Script template bootstrap

function initialize() {
  g_script_name=$(basename "${BASH_SOURCE[0]}")
  g_script_dir="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"

  g_short_options=""
  g_long_options=""
  g_positional_arguments=""
}

function cleanup_vars() {
  unset g_script_name
  unset g_script_dir

  unset g_short_options
  unset g_long_options
  unset g_positional_arguments

  unset g_script_author
  unset g_script_license
  unset g_script_version
  unset g_script_date

  cleanup_script_vars
}

function load_script_tools() {
  local dotfiles
  dotfiles="${DOTFILES:-$(xdg-user-dir DOTFILES)}"
  # Source script-tools.bash
  if [[ -f "${dotfiles}/bash/script-tools.bash" ]]; then
    # shellcheck source=/home/brennan/.dotfiles-rc/bash/script-tools.bash
    source "${dotfiles}/bash/script-tools.bash"
  fi
}

function show_version() {
  print_out "Application: ${g_script_name}"
  print_out "Author: ${g_script_author} --- License: ${g_script_license}"
  print_out "Version: ${g_script_version} --- Date: ${g_script_date}"
  print_blank_line
}

function show_help() {
  show_version
  print_help
}

function set_short_options() {
  g_short_options="$1"
}

function set_long_options() {
  g_long_options="$1"
}

function process_arguments() {
  local args
  set +o errexit # temporarily turn off error on exit
  args=$(getopt --name "${g_script_name}" --options "${g_short_options}hv" \
    --longoptions "${g_long_options},help,version" -- "$@")
  # Handle if getopt returned an error
  # shellcheck disable=SC2181
  if [[ $? -gt 0 ]]; then
    show_help
    exit 1
  fi
  set -o errexit # turn error on exit back on

  eval set -- "${args}"

  ## Handle the required options, help & version, bypass everything else
  local flags=("$@")
  local i=0
  while [[ "$i" -lt "${#flags[@]}" ]]; do
    local flag=${flags[i]}
    if [[ "${flag}" == "-h" || "${flag}" == "--help" ]]; then
      show_help
      exit 0
    elif [[ "${flag}" == "-v" || "${flag}" == "--version" ]]; then
      show_version
      exit 0
    elif [[ "${flag}" == "--" ]]; then
      break
    fi
    i=$((i + 1))
  done

  # Split up the flags and positionals
  local flags=() positional_arguments=()
  local reached_positionals=0
  while [[ $# -gt 0 ]]; do
    if [[ "$1" == "--" ]]; then
      reached_positionals=1
      shift
    else
      if [[ "${reached_positionals}" -eq 1 ]]; then
        positional_arguments+=("$1")
        shift
      else
        flags+=("$1")
        shift
      fi
    fi
  done

  process_flags "${flags[@]}"
  g_positional_arguments=("${positional_arguments[@]}")
}

## USAGE: First parameter should be the number of expected (required) positional arguments.
## Optionally, you can pass in a second argument to customize the error message.
function validate_number_of_positional_arguments() {
  local expected_arguments=$1
  local error_msg="${2:-Invalid number of arguments, expected at least ${expected_arguments}.}"

  if [[ "${#g_positional_arguments[@]}" -lt ${expected_arguments} ]]; then
    print_error "${error_msg}"
    show_help
    exit 1
  fi
}

function main_handler() {
  initialize
  load_script_tools
  setup_script_vars
  setup_options
  process_arguments "$@"
  main "${g_positional_arguments[@]}"
  cleanup_vars
}

### END Script template bootstrap
###################################################################################################

## USAGE: If you want any global variables, set them up here
function setup_script_vars() {
  # Must be set here
  g_script_author="Brennan Fee"
  g_script_license="MIT License"
  g_script_version="0.7"
  g_script_date="2025-06-10"

  # Add others here
  g_include_dev_tools="false"
  g_desktop_environment="none"
}

## USAGE: If you add any global variables, clean them up in this method
function cleanup_script_vars() {
  unset g_include_dev_tools
  unset g_desktop_environment
}

## USAGE: If you need to add any command-line flags or options, do it here.
## You should call one or both of the helper methods set_short_options or
## set_long_options.  They accept a string with syntax that is the same for
## the getopt program.  See it's help for more information.
function setup_options() {
  set_short_options "de:"
  set_long_options "include-dev,desktop-environment:"
}

## Usage: If you added command-line flags or options using setup_options,
## process them here.  The flags and their values will be passed as an array
## directly into this method so you can process them however you wish,
## including using 'shift' as you loop.
function process_flags() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
    '-d' | '--include-dev')
      g_include_dev_tools="true"
      shift
      ;;
    '-e' | '--desktop-environment')
      g_desktop_environment=$(echo "$2" | tr "[:upper:]" "[:lower:]")
      shift 2
      ;;
    '--')
      shift
      break
      ;;
    *)
      throw_error_msg "Unknown option: $1"
      ;;
    esac
  done
}

## USAGE: Construct your help screen text here.
function print_help() {
  print_out "  ${g_script_name} [options]"
  print_blank_line
  print_out "This program sets up Flatpak and installs my desired applications/tools."
  print_blank_line
  print_out "Options:"
  print_blank_line
  print_out "  -h or --help"
  print_out "      Show this help screen."
  print_blank_line
  print_out "  -v or --version"
  print_out "     Show the version number."
  print_blank_line
  print_out "  -d or --include-dev"
  print_out "     Also install the tools for a development environment."
  print_blank_line
  print_out "  -e or --desktop-environment"
  print_out "     The desktop Flatpak should integrate with (default is none)."
  print_out "     The supported values are 'none', 'KDE', 'Gnome', 'Mate', and 'Tiling'."
  print_blank_line
}

function install_prerequisites() {
  DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q update
  DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q install \
    flatpak flatpak-xdg-utils

  case "${g_desktop_environment}" in
  "none" | "server")
    true ## noop
    ;;
  "kde")
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q install \
      xdg-desktop-portal xdg-desktop-portal-kde plasma-discover-backend-flatpak \
      qt5-xdgdesktopportal-platformtheme qt6-xdgdesktopportal-platformtheme \
      xdg-desktop-portal-wlr
    ;;
  "gnome")
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q install \
      xdg-desktop-portal xdg-desktop-portal-gnome gnome-software-plugin-flatpak \
      xdg-desktop-portal-wlr
    ;;
  "mate" | "tiling")
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q install \
      xdg-desktop-portal xdg-desktop-portal-gtk xdg-desktop-portal-wlr
    ;;
  *)
    print_warning "Unknown desktop environment requested."
    ;;
  esac

  # Setup flathub repo
  flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

  # Setup theme access
  sudo flatpak override --system --filesystem=xdg-config/gtk-3.0:ro
  sudo flatpak override --system --filesystem=xdg-config/gtk-4.0:ro
  sudo flatpak override --system --filesystem=xdg-config/gtkrc-2.0:ro
  sudo flatpak override --system --filesystem=xdg-config/gtkrc:ro
}

function install_if_needed() {
  if [[ $(flatpak list --columns=application | grep -i -c "${1}") -eq 0 ]]; then
    flatpak install -y --noninteractive flathub "${1}"
  fi
}

function install_common_tools() {
  # Theme support
  install_if_needed org.gtk.Gtk3theme.Breeze
  # install_if_needed org.gtk.Gtk3theme.Breeze-Dark

  # Apps
  install_if_needed com.bambulab.BambuStudio
  install_if_needed com.bitwarden.desktop
  install_if_needed com.brave.Browser
  install_if_needed com.github.tchx84.Flatseal
  install_if_needed com.github.tenderowl.frog
  install_if_needed com.google.Chrome
  install_if_needed com.jgraph.drawio.desktop
  install_if_needed com.plexamp.Plexamp
  install_if_needed com.rafaelmardojai.Blanket
  install_if_needed com.sweethome3d.Sweethome3d
  install_if_needed fr.handbrake.ghb
  install_if_needed io.github.Qalculate.qalculate-qt
  install_if_needed md.obsidian.Obsidian
  install_if_needed org.bleachbit.BleachBit
  install_if_needed org.gnome.baobab
  install_if_needed org.kde.okular
  install_if_needed org.libreoffice.LibreOffice
  install_if_needed org.localsend.localsend_app
  install_if_needed org.mozilla.firefox
  install_if_needed org.musicbrainz.Picard
  install_if_needed org.nomacs.ImageLounge
  install_if_needed org.signal.Signal
  install_if_needed org.speedcrunch.SpeedCrunch
  install_if_needed org.videolan.VLC
  install_if_needed org.wezfurlong.wezterm
  install_if_needed tv.plex.PlexDesktop
  install_if_needed tv.plex.PlexHTPC
}

function install_dev_tools() {
  if [[ ! "${g_include_dev_tools}" == "true" ]]; then
    return
  fi

  install_if_needed org.raspberrypi.rpi-imager
}

## Your main implementation goes here.  All of the positional arguments have
## been passed as an array to this function.
function main() {
  install_prerequisites

  install_common_tools
  install_dev_tools

  # Upgrade all installed
  flatpak upgrade -y --system
  flatpak upgrade -y --user
}

## This must be the last line
main_handler "$@"
