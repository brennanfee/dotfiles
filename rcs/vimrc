scriptencoding utf-8

" Vim 8 defaults
unlet! skip_defaults_vim
silent! source $VIMRUNTIME/defaults.vim
augroup vimStartup
    au!
augroup END

if filereadable(expand("~/.vimrc.bundles"))
    source ~/.vimrc.bundles
endif

if has("multi_byte")
    if &termencoding == ""
        let &termencoding = &encoding
    endif
    set encoding=utf-8
    set nobomb
    setglobal fileencoding=utf-8
    set fileencodings=ucs-bom,utf-8,latin1
endif

let mapleader = ","
let maplocalleader = "\\"

set exrc
set pastetoggle=<F2>

set relativenumber  " set realtive numbers to show
set number " also display the line number of the current line
set numberwidth=5

set ignorecase
set smartcase

set scrolloff=4
set linebreak
set nowrap
if &diff
    set wrap
endif

set hlsearch
set gdefault
set cursorline
set colorcolumn=100

set hidden
set confirm
set ttyfast

set tabstop=4
set shiftwidth=4
set softtabstop=4
set shiftround
set expandtab
set smartindent

set visualbell

set clipboard=unnamed

set backup
set backupdir=~/.vimscratch/backup//,$TEMP//,$TMP//

set swapfile
set directory=~/.vimscratch/swap//,$TEMP//,$TMP//

set undofile
set undodir=~/.vimscratch/undo//,$TEMP//,$TMP//

set noshowmode

set listchars=tab:>\ ,trail:-,extends:>,precedes:<
if (&termencoding ==# 'utf-8' || &encoding ==# 'utf-8') && version >= 700
    let &listchars="tab:\u25b8 ,trail:\u00b7,extends:\u00bb,precedes:\u00ab"
endif
set list

if exists('+macmeta')
  set macmeta
endif

set background=dark

if has('gui_running')
    set guioptions-=T
    set guioptions-=t
    set guioptions-=m
    colorscheme darcula
    if has('gui_win32') || has('gui_win64')
        set guifont=Hasklug_NF:h14
    elseif has('gui_macvim')
        set guifont=Hasklug\ Nerd\ Font\ Complete:h18
    else
        set guifont=Hasklug\ Nerd\ Font\ Complete\ 14
    endif
else
    if has('win32') || has('win64')
        set term=xterm

        " Remap the BackSpace key
        inoremap <Char-0x07F> <BS>
        nnoremap <Char-0x07F> <BS>
    else
        if ! has('nvim')
            set term=screen-256color
        endif
    endif

    set t_Co=256
    let &t_AB="\e[48;5;%dm"
    let &t_AF="\e[38;5;%dm"

    if has('termguicolors')
        let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
        let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
        set termguicolors
    endif

    colorscheme darcula
endif

" Setup mouse
if has('mouse')
    if has('win32') || has('win64')
        inoremap <Esc>[62~ <C-X><C-E>
        inoremap <Esc>[63~ <C-X><C-Y>
        nnoremap <Esc>[62~ <C-E>
        nnoremap <Esc>[63~ <C-Y>
    endif
endif

if has('win32') || has('win64')
    set shell=$COMSPEC
endif

" Leader K to grep word under cursor
nnoremap <leader>k :grep! "\b<C-R><C-W>\b"<CR>:cw<CR><CR>

" Mappings to manage vimrc
nmap <leader>ev :e $MYVIMRC<CR>
nmap <leader>eb :e ~/.vimrc.bundles<CR>
nmap <leader>sv :source $MYVIMRC<CR>

" Source the vimrc if saved
augroup autoreload_vimrc " {
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
    autocmd BufWritePost ~/.vimrc.bundles source $MYVIMRC
    autocmd BufWritePost ~/.vimrc.lightline source $MYVIMRC
augroup END " }

" Force the # of columns to no more than 120
set columns=120
augroup force_columns " {
    autocmd!
    autocmd VimResized * if (&columns > 120) | set columns=120 | endif
augroup END " }

au FileType markdown setlocal wrap

""" PLUGIN SETTINGS

" Ack.vim & Ctrl-P
if executable('rg')
    " Use rg over Grep
    let prg = &grepprg
    set grepprg&
    if prg ==# &grepprg
        set grepformat=%f:%l:%c:%m
        let &grepprg = 'rg --color=never --smart-case'
    else
        let &grepprg = prg
    endif

    " Use rg in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
    " let g:ctrlp_user_command = 'dir %s /-n /b/s /a-d'

    " rg is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0

    " Set up ack.vim plugin to use rg instead of ack
    let g:ackprg = 'rg --vimgrep --no-heading --color=never --smart-case'
    cnoreabbrev ag Ack
    cnoreabbrev aG Ack
    cnoreabbrev Ag Ack
    cnoreabbrev AG Ack
    cnoreabbrev rg Ack
    cnoreabbrev rG Ack
    cnoreabbrev Rg Ack
    cnoreabbrev RG Ack
endif

let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_clear_cache_on_exit = 1

" EditorConfig

let g:EditorConfig_exclude_patterns = ['fugitive://.*']
if has('win32') || has('win64')
    let g:EditorConfig_exec_path = 'C:\ProgramData\chocolatey\bin\editorconfig.exe'
    let g:EditorConfig_core_mode = 'external_command'
endif

" NERDTree
map <leader>t :NERDTreeToggle<CR>
" Close window if NERDTree is the only thing open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" BufTabLineColors
hi BufTabLineFill ctermfg=NONE ctermbg=236 cterm=NONE guifg=NONE guibg=#323232 gui=NONE
hi BufTabLineCurrent ctermfg=188 ctermbg=24 term=reverse guifg=#a9b7c6 guibg=#9876aa gui=NONE
hi BufTabLineActive ctermfg=188 ctermbg=24 term=reverse guifg=#a9b7c6 guibg=#214283 gui=NONE
hi BufTabLineHidden ctermfg=188 ctermbg=24 term=reverse guifg=#a9b7c6 guibg=#323232 gui=NONE
" Make buffers behave like tabs
nnoremap gt :bnext<CR>
nnoremap gT :bprevious<CR>
nnoremap gx :bdelete<CR>
nnoremap g0 :bfirst<CR>
nnoremap g$ :blast<CR>
nnoremap g4 :blast<CR>

" Easymotion
let g:EasyMotion_do_mapping = 0 " Disable default mappings
let g:EasyMotion_smartcase = 1
let g:EasyMotion_startofline = 0

nmap <leader>f <Plug>(easymotion-overwin-f)
nmap <leader>s <Plug>(easymotion-overwin-f)
nmap <leader>F <Plug>(easymotion-overwin-f2)
nmap <leader>w <Plug>(easymotion-overwin-w)
nmap <leader>W <Plug>(easymotion-bd-W)
nmap <leader>e <Plug>(easymotion-bd-e)
nmap <leader>E <Plug>(easymotion-bd-E)
nmap <leader>j <Plug>(easymotion-overwin-line)

" EasyClip
let g:EasyClipUseSubstituteDefaults = 1
let g:EasyClipAutoFormat = 1
let g:EasyClipShareYanks = 1
nnoremap gm m
nmap <leader>cf <plug>EasyClipToggleFormattedPaste
imap <c-v> <plug>EasyClipInsertModePaste
cmap <c-v> <plug>EasyClipCommandModePaste
nnoremap <leader>cf :call EasyClip#Yank(expand('%'))<cr>

" Lightline settings are sufficiently verbose so as to need their own file
if filereadable($HOME . "/.vimrc.lightline")
    source ~/.vimrc.lightline
endif

" Tabular
if exists(":Tabularize")
    nmap <leader>a= :Tabularize /=<CR>
    vmap <leader>a= :Tabularize /=<CR>
    nmap <leader>a: :Tabularize /:\zs<CR>
    vmap <leader>a: :Tabularize /:\zs<CR>
endif

" Pencil
let g:pencil#wrapModeDefault = 'soft'

augroup Pencil
    autocmd!
    autocmd FileType markdown,mkd call pencil#init() | set spell
    autocmd FileType text call pencil#init() | set spell
augroup END

""" END PLUGIN SETTINGS

" OS specific config, this should always be next to last
if filereadable($HOME . "/.vimrc.os")
    source ~/.vimrc.os
endif

" Local config, this should always be last
if filereadable($HOME . "/.vimrc.local")
    source ~/.vimrc.local
endif
