scriptencoding utf-8

" Vim 8 defaults
unlet! skip_defaults_vim
silent! source $VIMRUNTIME/defaults.vim
augroup vimStartup
    au!
augroup END

if filereadable(expand("~/.vim/vimrc.bundles"))
    source ~/.vim/vimrc.bundles
endif

if has("multi_byte")
    if &termencoding == ""
        let &termencoding = &encoding
    endif
    set encoding=utf-8
    set nobomb
    setglobal fileencoding=utf-8
    set fileencodings=ucs-bom,utf-8,latin1
endif

let mapleader = ","
let maplocalleader = "\\"

set exrc
set pastetoggle=<F2>

set relativenumber  " set realtive numbers to show
set number " also display the line number of the current line
set numberwidth=5

set ignorecase
set smartcase

set scrolloff=4
set linebreak
set nowrap
if &diff
    set wrap
endif

set hlsearch
set gdefault
set cursorline
set colorcolumn=100

set hidden
set confirm
set ttyfast

set tabstop=4
set shiftwidth=4
set softtabstop=4
set shiftround
set expandtab
set smartindent

set visualbell

set clipboard=unnamed

set backup
set backupdir=~/.vim/vimscratch/backup//,$TEMP//,$TMP//

set swapfile
set directory=~/.vim/vimscratch/swap//,$TEMP//,$TMP//

set undofile
set undodir=~/.vim/vimscratch/undo//,$TEMP//,$TMP//

set viminfo+=n~/.cache/vim/viminfo

set noshowmode
set conceallevel=2

set listchars=tab:>\ ,trail:-,extends:>,precedes:<
if (&termencoding ==# 'utf-8' || &encoding ==# 'utf-8') && version >= 700
    let &listchars="tab:\u25b8 ,trail:\u00b7,extends:\u00bb,precedes:\u00ab"
endif
set list

set iskeyword-=_

if exists('+macmeta')
  set macmeta
endif

set background=dark

if has('gui_running')
    set guioptions-=T
    set guioptions-=t
    set guioptions-=m
    colorscheme darcula
    if has('gui_win32') || has('gui_win64')
        set guifont=Hasklug_NF:h14
    elseif has('gui_macvim')
        set guifont=Hasklug\ Nerd\ Font\ Complete:h18
    else
        set guifont=Hasklug\ Nerd\ Font\ Complete\ 14
    endif
else
    if ! has('nvim')
        set term=screen-256color
    endif

    set t_Co=256

    if has('termguicolors')
        let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
        let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
        set termguicolors
    endif

    colorscheme darcula
endif

" Setup mouse
if has('mouse')
    set ttymouse=xterm2
    set mouse=a
endif

if has('windows')
    set shell=bash
    nnoremap <silent> <leader>y :call system('win32yank.exe -i', @0)<CR>
    vnoremap <silent> <leader>y :call system('win32yank.exe -i', @0)<CR>
endif

" Source the vimrc if saved
augroup autoreload_vimrc
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
    autocmd BufWritePost ~/.vim/vimrc.bundles source $MYVIMRC
    autocmd BufWritePost ~/.vim/vimrc.lightline source $MYVIMRC
augroup END

" Force the # of columns to no more than 120
set columns=120
augroup force_columns
    autocmd!
    autocmd VimResized * if (&columns > 120) | set columns=120 | endif
augroup END

""" KEYBOARD MAPPINGS

" Remap the add mark key to gm
nnoremap gm m

" Leader K to grep word under cursor
nnoremap <leader>k :grep! "\b<C-R><C-W>\b"<CR>:cw<CR><CR>

" Mappings to manage vimrc
nmap <leader>ev :e $MYVIMRC<CR>
nmap <leader>eb :e ~/.vim/vimrc.bundles<CR>
nmap <leader>sv :source $MYVIMRC<CR>

" Map lk to be another version of escape in insert and command mode
if has('gui_running')
    inoremap lk <esc>
    cnoremap lk <esc>
else
    :set <F13>=lk
    :inoremap <F13> <esc>
    :cnoremap <F13> <esc>
endif

""" LANGUAGE & FILETYPE SETTINGS

" Markdown
" First, turn off the one that comes with vim-polyglot
let g:polyglot_disabled = ['markdown']
augroup markdown_group
    autocmd!
    autocmd BufNewFile,BufFilePre,BufRead *.md set filetype=markdown
    autocmd FileType markdown setlocal wrap
augroup END

let g:markdown_fenced_languages = ['html', 'css', 'python', 'bash=sh', 'javascript', 'ruby', 'c', 'c#=cs', 'csharp=cs', "c++=cpp", 'viml=vim', 'ini=dosini' ]
" Highlighting for html/markdown
hi htmlItalic ctermfg=188 ctermbg=235 cterm=italic guifg=#a9b7c6 guibg=#2b2b2b gui=italic
hi htmlBold ctermfg=188 ctermbg=235 cterm=bold guifg=#a9b7c6 guibg=#2b2b2b gui=bold
hi htmlBoldItalic ctermfg=188 ctermbg=235 cterm=bold guifg=#a9b7c6 guibg=#2b2b2b gui=bold

" Git commits - Turn spellcheck on
augroup gitcommit_group
    autocmd!
    autocmd FileType git,gitsendemail,*commit*,*COMMIT* setlocal spell
augroup END

""" PLUGIN SETTINGS

" vim-gui-position
let g:gui_position_file_name = $HOME . "/.cache/vim/vimsize"

" Ack.vim & Ctrl-P
if executable('rg')
    " Use rg over Grep
    let prg = &grepprg
    set grepprg&
    if prg ==# &grepprg
        set grepformat=%f:%l:%c:%m
        let &grepprg = 'rg --color=never --smart-case'
    else
        let &grepprg = prg
    endif

    " Use rg in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
    " let g:ctrlp_user_command = 'dir %s /-n /b/s /a-d'

    " rg is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0

    " Set up ack.vim plugin to use rg instead of ack
    let g:ackprg = 'rg --vimgrep --no-heading --color=never --smart-case'
    cnoreabbrev ag Ack
    cnoreabbrev aG Ack
    cnoreabbrev Ag Ack
    cnoreabbrev AG Ack
    cnoreabbrev rg Ack
    cnoreabbrev rG Ack
    cnoreabbrev Rg Ack
    cnoreabbrev RG Ack
endif

let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_clear_cache_on_exit = 1

" EditorConfig

let g:editorconfig_blacklist = {
\    'filetype': ['git.*', 'fugitive']
\}

" ALE

let g:ale_sign_column_always = 1
let g:ale_linters = {
\    'javascript': ['standard'],
\    'typescript': ['tslint'],
\    'css': ['stylelint'],
\    'sass': ['stylelint'],
\    'scss': ['stylelint'],
\    'stylus': ['stylelint'],
\    'gitcommit': ['gitlint'],
\    'sh': ['shellcheck'],
\    'vim': ['vint'],
\    'yaml': ['yamlint'],
\}

let g:ale_fixers = { 'javascript': ['prettier_standard']}
let g:ale_fix_on_save = 1
let g:ale_sign_error = "\uf05e"
let g:ale_sign_warning = "\uf071"

" Signify

if exists('&signcolumn')
    set signcolumn=yes
endif

let g:signify_vcs_list = [ 'git' ]
let g:signify_realtime = 1
let g:signify_sign_add = "\uf067"
let g:signify_sign_delete = "\uf068"
let g:signify_sign_delete_first_line = "\uf068"
let g:signify_sign_change = "\uf111"
let g:signify_sign_changedelete = "\uf00d"

hi SignifySignAdd ctermfg=65 ctermbg=NONE cterm=NONE guifg=#5e8759 guibg=NONE gui=NONE
hi SignifySignChange ctermfg=222 ctermbg=NONE cterm=NONE guifg=#d9c767 guibg=NONE gui=NONE
hi SignifySignChangeDelete ctermfg=222 ctermbg=NONE cterm=NONE guifg=#d9c767 guibg=NONE gui=NONE
hi SignifySignDelete ctermfg=88 ctermbg=NONE cterm=NONE guifg=#8c0909 guibg=NONE gui=NONE
hi SignifySignDeleteFirstLine ctermfg=88 ctermbg=NONE cterm=NONE guifg=#8c0909 guibg=NONE gui=NONE

" FileBeagle
" Leader-f is reserved for easymotion so remap the "filebeagle" key to leader-t
let g:filebeagle_suppress_keymaps=1
let g:filebeagle_show_hidden=1
map <leader>t <Plug>FileBeagleOpenCurrentWorkingDir
map - <Plug>FileBeagleOpenCurrentBufferDir

" BufTabLineColors
hi BufTabLineFill ctermfg=NONE ctermbg=236 cterm=NONE guifg=NONE guibg=#323232 gui=NONE
hi BufTabLineCurrent ctermfg=188 ctermbg=24 term=reverse guifg=#a9b7c6 guibg=#9876aa gui=NONE
hi BufTabLineActive ctermfg=188 ctermbg=24 term=reverse guifg=#a9b7c6 guibg=#214283 gui=NONE
hi BufTabLineHidden ctermfg=188 ctermbg=24 term=reverse guifg=#a9b7c6 guibg=#323232 gui=NONE
" Make buffers behave like tabs
nnoremap gt :bnext<CR>
nnoremap gT :bprevious<CR>
nnoremap gx :bdelete<CR>
nnoremap g0 :bfirst<CR>
nnoremap g1 :bfirst<CR>
nnoremap g$ :blast<CR>
nnoremap g4 :blast<CR>

" Easymotion
let g:EasyMotion_do_mapping = 0 " Disable default mappings
let g:EasyMotion_smartcase = 1
let g:EasyMotion_startofline = 0

nmap <leader>f <Plug>(easymotion-overwin-f)
nmap <leader>s <Plug>(easymotion-overwin-f)
nmap <leader>F <Plug>(easymotion-overwin-f2)
nmap <leader>w <Plug>(easymotion-overwin-w)
nmap <leader>W <Plug>(easymotion-bd-W)
nmap <leader>e <Plug>(easymotion-bd-e)
nmap <leader>E <Plug>(easymotion-bd-E)
nmap <leader>j <Plug>(easymotion-overwin-line)

" EasyClip
let g:EasyClipUseSubstituteDefaults = 1
let g:EasyClipAutoFormat = 1
let g:EasyClipShareYanks = 1
let g:EasyClipShareYanksFile = ".cache/vim/easyclip"
nnoremap gm m
nmap <leader>cf <plug>EasyClipToggleFormattedPaste
nnoremap <leader>cy :call EasyClip#Yank(expand('%'))<cr>

" Lightline settings are sufficiently verbose so as to need their own file
if filereadable($HOME . "/.vim/vimrc.lightline")
    source ~/.vim/vimrc.lightline
endif

" Tabular
if exists(":Tabularize")
    nmap <leader>a= :Tabularize /=<CR>
    vmap <leader>a= :Tabularize /=<CR>
    nmap <leader>a: :Tabularize /:\zs<CR>
    vmap <leader>a: :Tabularize /:\zs<CR>
endif

" vim-better-whitespace
hi ExtraWhitespace ctermbg=88 guibg=#8c0909
let g:better_whiespace_enabled=1
let g:strip_whitespace_on_save=1

" Pencil
let g:pencil#wrapModeDefault = 'soft'
let g:pencil#textwidth = 100

augroup Pencil
    autocmd!
    autocmd FileType markdown,mkd call pencil#init() | call textobj#sentence#init() | setlocal spell
    autocmd FileType text call pencil#init() | call textobj#sentence#init() | setlocal spell
augroup END

""" END PLUGIN SETTINGS

" OS specific config, this should always be next to last
if filereadable($HOME . "/.vim/vimrc.os")
    source ~/.vim/vimrc.os
endif

" Local config, this should always be last
if filereadable($HOME . "/.vim/vimrc.local")
    source ~/.vim/vimrc.local
endif
