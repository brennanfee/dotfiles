" First, make a tweak to the Dracula color theme
hi CursorLine ctermbg=8 cterm=NONE guifg=NONE guibg=#44475a gui=NONE
hi Comment ctermfg=12 ctermbg=NONE cterm=NONE guifg=#6272a4 guibg=NONE gui=NONE

" Lightline Color Scheme (Dracula)
let s:background = [ '#282a36', 0 ]
let s:currentline = [ '#44475a', 8 ]
let s:foreground = [ '#f8f8f2', 15 ]

let s:yellow = [ '#f1fa8c', 3 ]
let s:orange = [ '#ffb86c', 9 ]
let s:red = [ '#ff5555', 1 ]
let s:cyan = [ '#8be9fd', 6 ]
let s:green = [ '#50fa7b', 2 ]
let s:pink = [ '#ff79c6', 5 ]
let s:purple = [ '#bd93f9', 4 ]
let s:blue = [ '#6272a4', 12 ]
let s:gray = [ '#909194', 7 ]

let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}
let s:p.normal.left = [ [ s:currentline, s:purple ], [ s:gray, s:background ] ]
let s:p.normal.right = [ [ s:currentline, s:gray], [ s:gray, s:background ] ]
let s:p.inactive.right = [ [ s:currentline, s:gray ], [ s:gray, s:currentline ] ]
let s:p.inactive.left =  [ [ s:gray, s:currentline ], [ s:gray, s:currentline ] ]
let s:p.insert.left = [ [ s:currentline, s:green ], [ s:foreground, s:background ] ]
let s:p.replace.left = [ [ s:currentline, s:red ], [ s:gray, s:background ] ]
let s:p.visual.left = [ [ s:currentline, s:pink ], [ s:gray, s:background ] ]
let s:p.normal.middle = [ [ s:gray, s:currentline ] ]
let s:p.inactive.middle = [ [ s:gray, s:currentline ] ]
let s:p.tabline.left = [ [ s:gray, s:background ] ]
let s:p.tabline.tabsel = [ [ s:currentline, s:purple ] ]
let s:p.tabline.middle = [ [ s:gray, s:currentline ] ]
let s:p.tabline.right = copy(s:p.normal.right)
let s:p.normal.error = [ [ s:red, s:currentline ] ]
let s:p.normal.warning = [ [ s:yellow, s:background ] ]

let g:lightline#colorscheme#dracula#palette = lightline#colorscheme#flatten(s:p)

" ------------------
" Lightline Settings
let g:lightline = {
    \ 'colorscheme': 'dracula',
    \ 'mode_map': { 'c': 'NORMAL' },
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ],
    \   'right': [ [ 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
    \ },
    \ 'component_function': {
    \   'modified': 'LightLineModified',
    \   'readonly': 'LightLineReadonly',
    \   'lineinfo': 'LightLineLineInfo',
    \   'fugitive': 'LightLineFugitive',
    \   'filename': 'LightLineFilename',
    \   'fileformat': 'LightLineFileformat',
    \   'filetype': 'LightLineFiletype',
    \   'fileencoding': 'LightLineFileencoding',
    \   'mode': 'LightLineMode',
    \   'ctrlpmark': 'LightLineCtrlPMark',
    \ },
    \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
    \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
    \}

function! LightLineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? "\ue0a2" : ""
endfunction

function! LightLineLineInfo()
    return "\ue0a1".' '.line('.').':'.col('.')
endfunction

function! LightLineFilename()
  let fname = expand('%:t')
  return fname == 'ControlP' && has_key(g:lightline, 'ctrlp_item') ? g:lightline.ctrlp_item :
        \ fname =~ '__Gundo\|NERD_tree' ? '' :
        \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ ('' != fname ? fname : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
      let mark = "\ue0a0"  " edit here for cool mark
      let branch = fugitive#head()
      return branch !=# '' ? mark.' '.branch : ''
    endif
  catch
  endtry
  return ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightLineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
  let fname = expand('%:t')
  return fname == 'ControlP' ? 'CtrlP' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! LightLineCtrlPMark()
  if expand('%:t') =~ 'ControlP' && has_key(g:lightline, 'ctrlp_item')
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
          \ , g:lightline.ctrlp_next], 0)
  else
    return ''
  endif
endfunction

let g:ctrlp_status_func = {
  \ 'main': 'CtrlPStatusFunc_1',
  \ 'prog': 'CtrlPStatusFunc_2',
  \ }

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_regex = a:regex
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
  return lightline#statusline(0)
endfunction
