#!/usr/bin/env bash
# shellcheck shell=bash

# Bash strict mode
([[ -n ${ZSH_EVAL_CONTEXT:-} && ${ZSH_EVAL_CONTEXT:-} =~ :file$ ]] ||
  [[ -n ${BASH_VERSION:-} ]] && (return 0 2>/dev/null)) && SOURCED=true || SOURCED=false
if ! ${SOURCED}; then
  set -o errexit  # same as set -e
  set -o nounset  # same as set -u
  set -o errtrace # same as set -E
  set -o pipefail
  set -o posix
  #set -o xtrace # same as set -x, turn on for debugging

  shopt -s inherit_errexit
  shopt -s extdebug
  IFS=$(printf '\n\t')
fi
# END Bash strict mode

# If not running interactively, don't do anything
if [[ $- != *i* ]]; then
  return
fi

export BASHRC_LOGS=0

function log_early() {
  if [[ ${BASHRC_LOGS} == "1" ]]; then
    local logPath="${HOME}"
    if [[ -d "${HOME}/profile" ]]; then
      logPath="${HOME}/profile"
    fi

    echo -e "$(/usr/bin/date --rfc-3339=ns):\n  $1" >>"${logPath}/bashrc.log"
  fi
}

log_early "-------------------------------------------------------------"
log_early "In bashrc"

# Most other places need to ONLY use the xdg-user-dir or my custom xdg_base_dir
# functions, but this directory is so critical and may not be loaded until after
# the base-profile.bash script has been run.  So I am being overly cautious with
# defaults on top of defaults here.  AFTER the base-profile is loaded the xdg
# functions should work and ALWAYS return valid paths.
dotfiles="${DOTFILES:-$(xdg-user-dir DOTFILES)}"
dotfiles="${dotfiles:-${HOME}/.dotfiles}"

log_early "Sourcing: ${dotfiles}/bash/base-profile.bash"
# shellcheck source=/home/brennan/.dotfiles/bash/base-profile.bash
builtin source "${dotfiles}/bash/base-profile.bash"

log_early "Sourcing: ${dotfiles}/bash/script-tools.bash"
# shellcheck source=/home/brennan/.dotfiles/bash/script-tools.bash
builtin source "${dotfiles}/bash/script-tools.bash"

log "After profile script sourcing."

# Reload them, now with the benefit of base-profile
dotfiles=$(xdg_base_dir DOTFILES)
dotfiles_private=$(xdg_base_dir DOTFILESPRIVATE)

# Again, defaults here just to be overly cautious
os_primary="${OS_PRIMARY:-linux}"      # Assume linux
os_secondary="${OS_SECONDARY:-debian}" # Assume debian

log "Starting main script loop."

# We want to walk "outside" in... which is to say run all options files first, then all
# exports, then all functions, etc.
for folder in "first" "options" "exports" "aliases" "third-party" "functions" "other"; do
  for base in "shared" "${os_primary}" "distros/${os_secondary}"; do
    for root in "${dotfiles}/bash" "${dotfiles_private}/bash"; do
      if [[ -d "${root}/${base}/${folder}" ]]; then
        for file in "${root}/${base}/${folder}"/*.bash; do
          source_if "${file}"
        done
      fi
    done
  done
done

log "Starting Windows WSL script loop."

# On Windows shells running in WSL run some overrides
if is_wsl; then
  for folder in "first" "options" "exports" "aliases" "third-party" "functions" "other"; do
    for root in "${dotfiles}/bash" "${dotfiles_private}/bash"; do
      if [[ -d "${root}/windows-wsl/${folder}" ]]; then
        for file in "${root}"/windows-wsl/"${folder}"/*.bash; do
          source_if "${file}"
        done
      fi
    done
  done
fi

log "Starting bash completions loop."

# Load bash completions
for file in "${dotfiles}"/bash/completions/*.bash; do
  source_if "${file}"
done

if [[ -x "${dotfiles}/bin/moose-mount-shares" ]]; then
  log "Checking if we need to mount shares."
  if ! mountpoint -q "${HOME}/mounts/files"; then
    log "Mounting shares"
    "${dotfiles}/bin/moose-mount-shares"
  fi
fi

# Local config, this should be last and never checked into source control (or if it is it should be host specific)
# shellcheck source=/dev/null
log "Sourcing local bashrc, if it exists."
source_if "${HOME}/.bashrc.local"

if command_exists colorscript; then
  log "Running colorscripts"
  colorscript banners random
fi

log "Final PROMPT_COMMAND: ${PROMPT_COMMAND[*]}"
if declare -p precmd_functions >/dev/null 2>&1; then
  log "Final precmd_functions: ${precmd_functions[*]}"
else
  log "precmd_functions not declared."
fi
if declare -p preexec_functions >/dev/null 2>&1; then
  log "Final preexec_functions: ${preexec_functions[*]}"
else
  log "preexec_functions not declared."
fi

log "Final path: ${PATH}"

unset root
unset base
unset folder
unset file

unset dotfiles
unset dotfiles_private
unset os_primary
unset os_secondary
