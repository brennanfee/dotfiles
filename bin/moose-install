#!/usr/bin/env bash

### START Bash strict mode
# shellcheck disable=SC2154
([[ -n ${ZSH_EVAL_CONTEXT} && ${ZSH_EVAL_CONTEXT} =~ :file$ ]] ||
  [[ -n ${BASH_VERSION} ]] && (return 0 2>/dev/null)) && SOURCED=true || SOURCED=false
if ! ${SOURCED}; then
  set -o errexit  # same as set -e
  set -o nounset  # same as set -u
  set -o errtrace # same as set -E
  set -o pipefail
  set -o posix
  #set -o xtrace # same as set -x, turn on for debugging

  shopt -s extdebug
  IFS=$(printf '\n\t')
fi
### END Bash strict mode

### START Script template bootstrap

script_name=$(basename "${BASH_SOURCE[0]}")
script_dir="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
script_author="Brennan Fee"
script_license="MIT License"
script_version="0.4"
script_date="2024-09-16"

function cleanup_vars() {
  unset script_name
  unset script_dir
  unset script_author
  unset script_license
  unset script_version
  unset script_date

  cleanup_script_vars
}

# Source script-tools.bash
if [[ -f "${script_dir}/../bash/script-tools.bash" ]]; then
  # shellcheck source=/home/brennan/.dotfiles/bash/script-tools.bash
  source "${script_dir}/../bash/script-tools.bash"
fi

function show_version() {
  print_status "${script_name}"
  print_status "Author: ${script_author} --- License: ${script_license}"
  print_status "Version: ${script_version} --- Date: ${script_date}"
  print_blank_line

  if [[ "${1:-}" == "exit" || "${1:-}" == "yes" ]]; then
    exit 0
  fi
}

### END Script template bootstrap

## Defaults
HELP="false"
ROLE_NAME=""

SUPPORTED_ROLES=('client' 'master' 'metalogger' 'chunkserver')

function cleanup_script_vars() {
  unset HELP
  unset ROLE_NAME
  unset SUPPORTED_ROLES
}

function process_arguments() {
  local args
  args=$(getopt --name "${script_name}" --options hv --longoptions "help,version" -- "$@")

  # Show help if no parameters were passed
  #
  # shellcheck disable=SC2181
  if [[ $? -ne 0 ]]; then
    show_help
  fi

  eval set -- "${args}"

  # Process flags and options
  #
  while true; do
    case "$1" in
    '-h' | '--help')
      HELP="true"
      show_help
      ;;
    '-v' | '--version')
      show_version "exit"
      ;;
    '--')
      shift
      break
      ;;
    *)
      throw_error_msg "Unknown option: $1"
      ;;
    esac
  done

  # Process positional arguments
  #
  local arg_count=1
  for arg; do
    case "${arg_count}" in
    1)
      # Normalize to lower case
      ROLE_NAME=$(echo "${arg}" | tr "[:upper:]" "[:lower:]")
      ;;
    2)
      break
      ;;
    *)
      throw_error_msg "Internal Argument Error"
      ;;
    esac
    arg_count=$((arg_count + 1))
  done
}

function show_help() {
  if [[ "${HELP}" == "false" ]]; then
    print_warning "Incorrect parameters or options provided."
    print_blank_line
  fi

  show_version ""

  print_info "This will install the binaries needed for MooseFS to perform one of three roles:"
  print_info "A client, the master server, or a metalogger server.  Both the master and metalogger"
  print_fino "roles also install the client binaries."
  print_blank_line
  print_status "  ${SCRIPT_NAME} [options] <role name>"
  print_blank_line
  print_status "Options:"
  print_blank_line
  print_status "  -h or --help"
  print_status "      Show this help screen."
  print_blank_line
  print_status "  -v or --version"
  print_status "     Show the version number."
  print_blank_line
  print_status "  <role name>"
  print_status "     The role to install, options are: client, master, metalogger, chunkserver."
  print_blank_line

  if [[ "${HELP}" == "false" ]]; then
    exit 1
  else
    exit 0
  fi
}

#### END: Help

function verify_role() {
  get_exit_code contains_element "${ROLE_NAME}" "${SUPPORTED_ROLES[@]}"
  if [[ ! ${EXIT_CODE} == "0" ]]; then
    throw_error_msg "Invalid role selected '${ROLE_NAME}', please input a valid role: Client, Master, Mettalogger, or Chunkserver."
  fi
}

function check_repo() {
  get_exit_code apt_package_exists "moosefs-client"
  if [[ ${EXIT_CODE} -ne 0 ]]; then
    # We need to install the repo
    local dpkg_arch
    dpkg_arch=$(dpkg --print-architecture)
    local release
    release=$(lsb_release -r -s)
    local distribution
    distribution=$(lsb_release -i -s | tr "[:upper:]" "[:lower:]")
    local edition_codename
    edition_codename=$(lsb_release -c -s | tr "[:upper:]" "[:lower:]")

    # Make sure the keyring folder exists
    mkdir -p /usr/local/share/keyrings

    # The key
    local key_file="/usr/local/share/keyrings/moosefs-archive-keyring.gpg"
    if [[ ! -f ${key_file} ]]; then
      wget -O- https://ppa.moosefs.com/moosefs.key | gpg --dearmor | tee "${key_file}"
    fi

    # This is a hack for the Debian testing edition
    if [[ ${release} == "testing" ]]; then
      # Moosefs does not create repo's for testing, only stable
      edition_codename=bookworm
    fi

    # This is a hack for Ubuntu editions, they only support LTS editions
    if [[ ${distribution} == "ubuntu" ]]; then
      if [[ ${edition_codename} == "kinetic" || ${edition_codename} == "lunar" ]]; then
        edition_codename=jammy
      fi
    fi

    # The repo
    local repo_file="/etc/apt/sources.list.d/moosefs.list"
    if [[ ! -f ${repo_file} ]]; then
      echo "deb [arch=${dpkg_arch} signed-by=${key_file}] https://ppa.moosefs.com/moosefs-3/apt/${distribution}/${edition_codename} ${edition_codename} main" >"${repo_file}"
    fi
  fi

  # Update apt
  DEBIAN_FRONTEND=noninteractive apt-get -y -q update
}

function main() {
  check_root_with_error ""
  verify_role

  check_repo

  case "${ROLE_NAME}" in
  client)
    DEBIAN_FRONTEND=noninteractive apt-get -y -q install \
      moosefs-client
    ;;
  master)
    DEBIAN_FRONTEND=noninteractive apt-get -y -q install \
      moosefs-master moosefs-cgi moosefs-cgiserv moosefs-cli moosefs-client
    ;;
  metalogger)
    DEBIAN_FRONTEND=noninteractive apt-get -y -q install \
      moosefs-metalogger moosefs-client
    ;;
  chunkserver)
    DEBIAN_FRONTEND=noninteractive apt-get -y -q install \
      moosefs-chunkserver moosefs-client
    ;;
  *)
    throw_error_msg "Invalid role detected '${ROLE_NAME}', something must have gone wrong."
    ;;
  esac
}

### START Script main handler

function main_handler() {
  local args=("$@")
  process_arguments "$@"

  main "${args[@]}"
  cleanup_vars
}

main_handler "$@"

### END Script main handler
