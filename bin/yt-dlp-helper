#!/usr/bin/env bash

### START Bash strict mode
# shellcheck disable=SC2154
([[ -n ${ZSH_EVAL_CONTEXT} && ${ZSH_EVAL_CONTEXT} =~ :file$ ]] ||
  [[ -n ${BASH_VERSION} ]] && (return 0 2>/dev/null)) && SOURCED=true || SOURCED=false
if ! ${SOURCED}; then
  set -o errexit  # same as set -e
  set -o nounset  # same as set -u
  set -o errtrace # same as set -E
  set -o pipefail
  set -o posix
  #set -o xtrace # same as set -x, turn on for debugging

  shopt -s extdebug
  IFS=$(printf '\n\t')
fi
### END Bash strict mode

### START Script template bootstrap

g_script_name=$(basename "${BASH_SOURCE[0]}")
g_script_dir="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"

g_short_options=""
g_long_options=""
g_positional_arguments=""

function cleanup_vars() {
  unset g_script_name
  unset g_script_dir
  unset g_script_author
  unset g_script_license
  unset g_script_version
  unset g_script_date

  unset g_short_options
  unset g_long_options
  unset g_positional_arguments

  cleanup_script_vars
}

function load_script_tools() {
  # Source script-tools.bash
  if [[ -f "${g_script_dir}/../bash/script-tools.bash" ]]; then
    # shellcheck source=/home/brennan/.dotfiles/bash/script-tools.bash
    source "${g_script_dir}/../bash/script-tools.bash"
  fi
}

function show_version() {
  print_out "Application: ${g_script_name}"
  print_out "Author: ${g_script_author} --- License: ${g_script_license}"
  print_out "Version: ${g_script_version} --- Date: ${g_script_date}"
  print_blank_line
}

function show_help() {
  show_version
  print_help
}

function set_short_options() {
  g_short_options="$1"
}

function set_long_options() {
  g_long_options="$1"
}

function process_arguments() {
  local args
  set +o errexit # temporarily turn off error on exit
  args=$(getopt --name "${g_script_name}" --options "${g_short_options}hv" --longoptions "${g_long_options},help,version" -- "$@")
  # Handle if getopt returned an error
  # shellcheck disable=SC2181
  if [[ $? -gt 0 ]]; then
    show_help
    exit 1
  fi
  set -o errexit # turn error on exit back on

  eval set -- "${args}"

  ## Handle the required options, help & version, bypass everything else
  local flags=("$@")
  local i=0
  while [[ "$i" -lt "${#flags[@]}" ]]; do
    local flag=${flags[i]}
    if [[ "${flag}" == "-h" || "${flag}" == "--help" ]]; then
      show_help
      exit 0
    elif [[ "${flag}" == "-v" || "${flag}" == "--version" ]]; then
      show_version
      exit 0
    elif [[ "${flag}" == "--" ]]; then
      break
    fi
    i=$((i + 1))
  done

  # Split up the flags and positionals
  local flags=() positional_arguments=()
  local reached_positionals=0
  while [[ $# -gt 0 ]]; do
    if [[ "$1" == "--" ]]; then
      reached_positionals=1
      shift
    else
      if [[ "${reached_positionals}" -eq 1 ]]; then
        positional_arguments+=("$1")
        shift
      else
        flags+=("$1")
        shift
      fi
    fi
  done

  process_flags "${flags[@]}"
  g_positional_arguments=("${positional_arguments[@]}")

  # We require at least one positional argument for the sub_command
  validate_number_of_positional_arguments 1 "Invalid number of arguments - missing command."
}

## USAGE: First parameter should be the number of expected (required) positional arguments.
## Optionally, you can pass in a second argument to customize the error message.
function validate_number_of_positional_arguments() {
  local expected_arguments=$1
  local error_msg="${2:-Invalid number of arguments, expected at least ${expected_arguments}.}"

  if [[ "${#g_positional_arguments[@]}" -lt ${expected_arguments} ]]; then
    print_error "${error_msg}"
    show_help
    exit 1
  fi
}

function main_handler() {
  load_script_tools
  setup_script_vars
  setup_options
  process_arguments "$@"
  main "${g_positional_arguments[@]}"
  cleanup_vars
}

g_script_author="Brennan Fee"
g_script_license="MIT License"
g_script_version="0.5"
g_script_date="2025-02-22"

### END Script template bootstrap
#################################

## USAGE: If you want any global variables, set them up here
function setup_script_vars() {
  noop
}

## USAGE: If you add any global variables, clean them up in this method
function cleanup_script_vars() {
  # unset abc

  noop
}

## USAGE: If you need to add any command-line flags or options, do it here.
## You should call one or both of the helper methods set_short_options or
## set_long_options.  They accept a string with syntax that is the same for
## the getopt program.  See it's help for more information.
function setup_options() {
  # set_short_options "abc:"
  # set_long_options "beta,charlie:"

  noop
}

## Usage: If you added command-line flags or options using setup_options,
## process them here.  The flags and their values will be passed as an array
## directly into this method so you can process them however you wish,
## including using 'shift' as you loop.
function process_flags() {
  # while [[ $# -gt 0 ]]; do
  #   case "$1" in
  #   '-a')
  #     alpha=1 # or "yes"
  #     shift
  #     ;;
  #   '-c' | '--charlie')
  #     charlie="$2"
  #     shift 2
  #     ;;
  #   '--')
  #     shift
  #     break
  #     ;;
  #   *)
  #     throw_error_msg "Unknown option: $1"
  #     ;;
  #   esac
  # done

  noop
}

## USAGE: Construct your help screen text here.
function print_help() {
  print_out "  ${g_script_name} [options] <sub-command> [pass-through arguments]"
  print_blank_line
  print_out "This program is a wrapper around yt-dlp for downloading videos"
  print_out "and music from the web."
  print_blank_line
  print_out "Options:"
  print_blank_line
  print_out "  -h or --help"
  print_out "      Show this help screen."
  print_blank_line
  print_out "  -v or --version"
  print_out "     Show the version number."
  print_blank_line
  print_out "Sub-Commands:"
  print_blank_line
  print_out "All sub-commands begin with 'yt', adding an 'l' will allow or use a"
  print_out "playlist if supplied in the URL.  Adding a 'p' will use an alternate"
  print_out "storage location.  Finally, adding an 'm' will download an mp3"
  print_out "music/audio file rather than the video.  So as some examples: 'ytm'"
  print_out "for an audio file, 'ytp' for the alternate storage location, and"
  print_out "'ytl' to download everything in a playlist."
}

# Usage: yt_helper "$@"
# Sub-command MUST start with yt.  Augments can be passed with m being for music,
# l to download an entire playlist (as opposed to just the single item given,
# which is the default behavior for a combined url), and p to use the alternate
# output location.  Note that passing JUST a playlist url (no reference to a
# playlist item will still download the entire playlist even without the l modifier).
function yt_helper() {
  local sub_command
  sub_command="${1:-unk}"
  shift

  if [[ ! "${sub_command}" == yt* ]]; then
    throw_error_msg "Unknown ${g_script_name} command!  Value: ${sub_command}"
  fi

  # The url to download
  local url
  if [[ "${1:-}" =~ ^"http" ]]; then
    # It was passed in on the command line, always must be first parameter
    url="$1"
    shift
  elif is_wsl; then
    # Get url from windows clipboard
    url=$(powershell.exe -NoProfile -NonInteractive -ExecutionPolicy Bypass -Command Get-Clipboard)
  else
    # Get url from linux (or mac?) clipboard
    url=$(xsel -o --clipboard)
  fi

  # Process command flags

  ## Determine what type of download we want (video file or audio file)
  local type="video"
  if [[ "${sub_command}" == *"m"* ]]; then
    type="audio"
  fi

  ## Determine if we want to force playlist download
  local playlist_flag="false"
  if [[ "${sub_command}" == *"l"* ]]; then
    playlist_flag="true"
  fi

  ## Determine if we want to use the alternate save location
  local alternate_location="false"
  if [[ "${sub_command}" == *"p"* ]]; then
    alternate_location="true"
  fi

  ## FOR DEBUGGING
  # echo "Type: ${type}"
  # echo "Playlist Flag: ${playlist_flag}"
  # echo "Alternate Location: ${alternate_location}"

  ## END Process command flags

  local yt_dlp_params=()

  # Build up the parameters to pass in an array, start with a few values used always
  yt_dlp_params+=("--embed-metadata" "--embed-thumbnail" "--embed-chapters" "--no-mtime")

  if [[ "${playlist_flag}" == "true" ]]; then
    # The ignore-errors is needed otherwise the playlist download would stop on a single
    # link failure, this way it will continue download the rest of the playlist items
    yt_dlp_params+=("--yes-playlist" "--ignore-errors")
  else
    yt_dlp_params+=("--no-playlist")
  fi

  # Format Selection
  if [[ "${type}" == "video" ]]; then
    yt_dlp_params+=("--mark-watched")
    # Prioritize http over other protocols (m3u8, for instance).  Prever h264 & h265 over anything
    # else.
    local format
    format+="bestvideo[height<=?1080][vcodec~='^((he|a)vc1?|h26[45])'][protocol^=http]+bestaudio"
    format+="/best[height<=?1080][vcodec~='^((he|a)vc1?|h26[45])'][protocol^=http]"
    format+="/best[height<=?1080][protocol^=http]"
    format+="/bestvideo[height<=?1080][vcodec~='^((he|a)vc1?|h26[45])']+bestaudio"
    format+="/best[height<=?1080][vcodec~='^((he|a)vc1?|h26[45])']"
    format+="/best[height<=?1080]"

    yt_dlp_params+=("--format" "${format}")
  else
    # We want an audio file
    yt_dlp_params+=("--extract-audio" "--audio-format" "mp3")

    # A music download, format selection looks for just audio first and prioritizes http protocol
    local format="bestaudio[protocol^=http]/bestaudio*[protocol^=http]/best[protocol^=http]/bestaudio/bestaudio*/best"

    yt_dlp_params+=("--format" "${format}")
  fi

  # Format sort order
  yt_dlp_params+=("--format-sort" "+codec:avc:m4a")

  # Output directory and filename
  local directory
  directory="$(xdg_base_dir VIDEOS)" ## default to video directory
  if [[ "${alternate_location}" == "true" ]]; then
    directory="$(xdg_base_dir PICTURES)/_other" ## alternate location
  fi

  ## Ensure the directory exists
  mkdir -p "${directory}"

  ## Output file name template
  local name_template="${directory}/%(title).125B-%(id)s-[%(channel,channel_id,creator,uploader)s].%(ext)s"

  yt_dlp_params+=("--output" "${name_template}")

  # Cookies, default to firefox, but for the alternate location, chrome
  if [[ "${alternate_location}" == "false" ]]; then
    yt_dlp_params+=("--cookies-from-browser" "firefox")
  else
    yt_dlp_params+=("--cookies-from-browser" "chrome")
  fi

  #### Site specific customizations
  local full_domain
  local domain
  # First, cut the path parts out, then use sed to extract just the domain name, then lower case
  full_domain=$(echo "${url}" | cut -d'/' -f1,2,3 | sed -e 's/[^/]*\/\/\([^@]*@\)\?\([^:/]*\).*/\2/' | tr '[:upper:]' '[:lower:]')
  # Now strip off sub-domains
  domain=$(echo "${full_domain}" | awk -F. '{print $(NF-1) "." $NF}')
  echo "Full Domain: ${full_domain}"
  echo "Domain: ${domain}"

  # Youtube has started throttling, so we need to add some delays.  I am using
  # different delays for a single file versus a playlist.
  if [[ "${domain}" == "youtube.com" ]]; then
    yt_dlp_params+=("--sleep-requests" "0.5")
    if [[ "${playlist_flag}" == "true" ]]; then
      yt_dlp_params+=("--min-sleep-interval" "3" "--max-sleep-interval" "20")
    else
      yt_dlp_params+=("--min-sleep-interval" "1" "--max-sleep-interval" "5")
    fi
  fi

  if [[ "${domain}" == "xhamster.com" ]]; then
    yt_dlp_params+=("--compat-options" "allow-unsafe-ext")
  fi

  #### END Site specific customizations

  # Lastly, add the url
  yt_dlp_params+=("${url}")

  echo "Downloading ${url}"

  ## FOR DEBUGGING
  # echo "Params: ${yt_dlp_params[*]}"

  yt-dlp "${yt_dlp_params[@]}" "$@"

  os_notify_and_speak "Download Complete From ${domain}" "Source: ${url}"
}

## Your main implementation goes here.  All of the positional arguments have
## been passed as an array to this function.  The first parameter should be
## the sub-command.
function main() {
  yt_helper "$@"
}

## This must be the last line
main_handler "$@"
