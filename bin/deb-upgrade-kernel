#!/usr/bin/env bash

### START Bash strict mode
# shellcheck disable=SC2154
([[ -n ${ZSH_EVAL_CONTEXT} && ${ZSH_EVAL_CONTEXT} =~ :file$ ]] ||
  [[ -n ${BASH_VERSION} ]] && (return 0 2>/dev/null)) && SOURCED=true || SOURCED=false
if ! ${SOURCED}; then
  set -o errexit  # same as set -e
  set -o nounset  # same as set -u
  set -o errtrace # same as set -E
  set -o pipefail
  set -o posix
  #set -o xtrace # same as set -x, turn on for debugging

  shopt -s extdebug
  IFS=$(printf '\n\t')
fi
### END Bash strict mode

### START Script template bootstrap

script_name=$(basename "${BASH_SOURCE[0]}")
script_dir="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
script_author="Brennan Fee"
script_license="MIT License"
script_version="0.2"
script_date="2024-09-16"

function cleanup_vars() {
  unset script_name
  unset script_dir
  unset script_author
  unset script_license
  unset script_version
  unset script_date

  cleanup_script_vars
}

# Source script-tools.bash
if [[ -f "${script_dir}/../bash/script-tools.bash" ]]; then
  # shellcheck source=/home/brennan/.dotfiles/bash/script-tools.bash
  source "${script_dir}/../bash/script-tools.bash"
fi

function show_version() {
  print_status "${script_name}"
  print_status "Author: ${script_author} --- License: ${script_license}"
  print_status "Version: ${script_version} --- Date: ${script_date}"
  print_blank_line

  if [[ "${1:-}" == "exit" || "${1:-}" == "yes" ]]; then
    exit 0
  fi
}

### END Script template bootstrap

function cleanup_script_vars() {
  noop
}

function main() {
  check_root_with_error ""

  DEBIAN_FRONTEND=noninteractive apt-get -y -q update

  local dpkg_arch
  dpkg_arch=$(dpkg --print-architecture)

  local edition
  edition=$(lsb_release -c -s 2>/dev/null)

  local current_testing
  current_testing=$(wget -q -O- "deb.debian.org/debian/dists/testing/Release" |
    grep -i 'Codename:' | cut -d' ' -f2)
  local dont_support_backports=("testing" "sid" "unstable" "rc-buggy" "experimental")

  dont_support_backports+=("${current_testing}")

  # Check if edition even supports backports
  get_exit_code contains_element "${edition}" "${dont_support_backports[@]}"
  if [[ ! "${EXIT_CODE}" != "0" ]]; then
    print_warning "Debian edition '${edition}' does not support backports."
    exit 0
  fi

  # Check to see if the package exists in backports
  if ! apt_package_exists "linux-image-${dpkg_arch}/${edition}-backports"; then
    print_status "Backport is not yet available for this edition '${edition}'. Please try again later."
    exit 0
  fi

  print_status "Backport kernel found, installing..."

  DEBIAN_FRONTEND=noninteractive apt-get -y -q install -t "${edition}-backports" \
    "linux-image-${dpkg_arch}" "linux-headers-${dpkg_arch}" firmware-linux

  print_success "Backports kernel install complete.  It is HIGHLY recommended to reboot."
}

### START Script main handler

function main_handler() {
  main "$@"
  cleanup_vars
}

main_handler "$@"

### END Script main handler
