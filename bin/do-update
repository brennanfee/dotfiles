#!/usr/bin/env bash

### START Bash strict mode
# shellcheck disable=SC2154
([[ -n ${ZSH_EVAL_CONTEXT} && ${ZSH_EVAL_CONTEXT} =~ :file$ ]] ||
  [[ -n ${BASH_VERSION} ]] && (return 0 2>/dev/null)) && SOURCED=true || SOURCED=false
if ! ${SOURCED}; then
  set -o errexit  # same as set -e
  set -o nounset  # same as set -u
  set -o errtrace # same as set -E
  set -o pipefail
  set -o posix
  #set -o xtrace # same as set -x, turn on for debugging

  shopt -s extdebug
  IFS=$(printf '\n\t')
fi
### END Bash strict mode

### START Script template bootstrap

g_script_name=$(basename "${BASH_SOURCE[0]}")
g_script_dir="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
g_script_author="Brennan Fee"
g_script_license="MIT License"
g_script_version="0.2"
g_script_date="2024-10-07"

g_short_options=""
g_long_options=""
g_positional_arguments=""

function cleanup_vars() {
  unset g_script_name
  unset g_script_dir
  unset g_script_author
  unset g_script_license
  unset g_script_version
  unset g_script_date

  unset g_short_options
  unset g_long_options
  unset g_positional_arguments

  cleanup_script_vars
}

function load_script_tools() {
  # Source script-tools.bash
  if [[ -f "${g_script_dir}/../bash/script-tools.bash" ]]; then
    # shellcheck source=/home/brennan/.dotfiles/bash/script-tools.bash
    source "${g_script_dir}/../bash/script-tools.bash"
  fi
}

function show_version() {
  print_out "Application: ${g_script_name}"
  print_out "Author: ${g_script_author} --- License: ${g_script_license}"
  print_out "Version: ${g_script_version} --- Date: ${g_script_date}"
  print_blank_line
}

function show_help() {
  show_version
  print_help
}

function set_short_options() {
  g_short_options="$1"
}

function set_long_options() {
  g_long_options="$1"
}

function process_arguments() {
  local args
  set +o errexit # temporarily turn off error on exit
  args=$(getopt --name "${g_script_name}" --options "${g_short_options}hv" --longoptions "${g_long_options},help,version" -- "$@")
  # Handle if getopt returned an error
  # shellcheck disable=SC2181
  if [[ $? -gt 0 ]]; then
    show_help
    exit 1
  fi
  set -o errexit # turn error on exit back on

  eval set -- "${args}"

  ## Handle the required options, help & version, bypass everything else
  local flags=("$@")
  local i=0
  while [[ "$i" -lt "${#flags[@]}" ]]; do
    local flag=${flags[i]}
    if [[ "${flag}" == "-h" || "${flag}" == "--help" ]]; then
      show_help
      exit 0
    elif [[ "${flag}" == "-v" || "${flag}" == "--version" ]]; then
      show_version
      exit 0
    elif [[ "${flag}" == "--" ]]; then
      break
    fi
    i=$((i + 1))
  done

  # Split up the flags and positionals
  local flags=() positional_arguments=()
  local reached_positionals=0
  while [[ $# -gt 0 ]]; do
    if [[ "$1" == "--" ]]; then
      reached_positionals=1
      shift
    else
      if [[ "${reached_positionals}" -eq 1 ]]; then
        positional_arguments+=("$1")
        shift
      else
        flags+=("$1")
        shift
      fi
    fi
  done

  process_flags "${flags[@]}"
  g_positional_arguments=("${positional_arguments[@]}")
}

## USAGE: First parameter should be the number of expected (required) positional arguments.
## Optionally, you can pass in a second argument to customize the error message.
function validate_number_of_positional_arguments() {
  local expected_arguments=$1
  local error_msg="${2:-Invalid number of arguments, expected at least ${expected_arguments}.}"

  if [[ "${#g_positional_arguments[@]}" -lt ${expected_arguments} ]]; then
    print_error "${error_msg}"
    show_help
    exit 1
  fi
}

function main_handler() {
  load_script_tools
  setup_options
  process_arguments "$@"
  main "${g_positional_arguments[@]}"
  cleanup_vars
}

### END Script template bootstrap
#################################

## USAGE: If you add any global variables, clean them up in this method
function cleanup_script_vars() {
  # unset abc

  noop
}

## USAGE: If you need to add any command-line flags or options, do it here.
## You should call one or both of the helper methods set_short_options or
## set_long_options.  They accept a string with syntax that is the same for
## the getopt program.  See it's help for more information.
function setup_options() {
  # set_short_options "abc:"
  # set_long_options "beta,charlie:"

  noop
}

## Usage: If you added command-line flags or options using setup_options,
## process them here.  The flags and their values will be passed as an array
## directly into this method so you can process them however you wish,
## including using 'shift' as you loop.
function process_flags() {
  # while [[ $# -gt 0 ]]; do
  #   case "$1" in
  #   '-a')
  #     alpha=1 # or "yes"
  #     shift
  #     ;;
  #   '-c' | '--charlie')
  #     charlie="$2"
  #     shift 2
  #     ;;
  #   '--')
  #     shift
  #     break
  #     ;;
  #   *)
  #     throw_error_msg "Unknown option: $1"
  #     ;;
  #   esac
  # done

  noop
}

## USAGE: Construct your help screen text here.
function print_help() {
  print_out "Do Updates (doup) Help"
  print_blank_line
  print_out "By default, doup updates all the things."
  print_blank_line
  print_out "Optionally you can request a single or a space separated list"
  print_out "of items to update.  The individual options are:"
  print_blank_line
  print_out "all, apt, flatpak, snaps, mise, pipx, asdf, appman, tmux, vim, nvim"
  print_blank_line
  print_out "Note that the order of the parameters can change the order in"
  print_out "in which the steps are run.  Passing in 'all' halts processing of"
  print_out "the rest of the arguments and updates all the things."
  print_blank_line
}

function record_last_updated() {
  (
    IFS=$' '
    date +"%Y-%m-%d %r : $*" >>"${XDG_CACHE_HOME:-$HOME/.cache}/updates.log"
  )
}

function updateApt() {
  if command_exists apt-get; then
    print_info "Getting updates with apt"
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q update
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q full-upgrade
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q autoremove
  fi
}

function updateFlatpak() {
  if command_exists flatpak; then
    print_info "Getting updates with flatpak"
    flatpak upgrade -y --system
    flatpak upgrade -y --user
  fi
}

function updateSnaps() {
  if command_exists snap; then
    print_info "Getting updates with snap"
    sudo snap refresh
  fi
}

function updatePipx() {
  if command_exists pipx; then
    print_info "Getting updates with pipx"
    pipx upgrade-all --include-injected
  fi
}

function updateUv() {
  if command_exists uv; then
    # NOTE: No need to update UV itself as that is being managed by Mise
    print_info "Getting updates for uv tools"

    # Update the tools
    uv tool upgrade --all

    # Prune the cache
    uv cache prune
  fi
}

function updateMise() {
  if command_exists mise; then
    print_info "Updating mise"
    local dotfiles
    dotfiles="$(xdg_base_dir DOTFILES)"

    # Trust the config file
    mise -y trust "${dotfiles}/rcs/config/mise/config.toml"
    mise -y trust "$(xdg_base_dir CONFIG)/mise/config.toml"

    # Update mise itself
    mise -y self-update

    # Install and upgrade tools
    mise -y install
    # mise -y upgrade --bump --verbose
    mise -y upgrade
    mise -y reshim # may not be necessary
    mise -y prune
    mise -y cache prune

    # Re-create any mise-related symlinks
    "${dotfiles}/bash/assets/create-coreutils-links.bash"
  fi
}

function updateAsdf() {
  if command_exists asdf; then
    print_info "Updating asdf"
    asdf update
    print_info "Updating plugins for asdf"
    asdf plugin update --all
    print_info "Updating asdf tools"
    asdf install
  fi
}

function updateAppman() {
  if command_exists appman; then
    # sync
    appman -s
    # update
    appman -u
  fi
}

function updateAm() {
  if command_exists am; then
    # sync
    sudo am -s
    # update
    sudo am -u
  fi
}

function updateTmux() {
  if command_exists tmux; then
    print_info "Updating tmux plugins"
    local tmux_plugin_manager_path="$(tmux start-server\; show-environment -g TMUX_PLUGIN_MANAGER_PATH | cut -f2 -d=)"

    # Download the tmux plugin manager if it isn't already there
    if [[ ! -d "${tmux_plugin_manager_path}/tpm" ]]; then
      git clone https://github.com/tmux-plugins/tpm "${tmux_plugin_manager_path}/tpm"
    fi

    if [[ -f "${tmux_plugin_manager_path}/tpm/bin/install_plugins" ]]; then
      "${tmux_plugin_manager_path}/tpm/bin/install_plugins"
    fi
  fi
}

function updateVim() {
  if command_exists vim; then
    print_info "Updating vim plugins"
    mkdir -p "${XDG_CACHE_HOME:-$HOME/.cache}/vim"
    mkdir -p "${XDG_CACHE_HOME:-$HOME/.cache}/zsh"

    # Download vim-plug & initialize the bundles if needed
    if [[ ! -e ${HOME}/.vim/autoload/plug.vim ]]; then
      curl -fsSLo "${HOME}/.vim/autoload/plug.vim" --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    fi

    if [[ -f ${HOME}/.vim/vimrc.bundles ]]; then
      /usr/bin/vim -N -u "${HOME}/.vim/vimrc.bundles" +PlugUpdate +PlugClean! +qa
    fi

    # Create the scratch directories
    mkdir -p "${HOME}/.vim/vimscratch/backup"
    mkdir -p "${HOME}/.vim/vimscratch/swap"
    mkdir -p "${HOME}/.vim/vimscratch/undo"
  fi
}

function updateNvim() {
  if command_exists nvim; then
    print_info "Updating nvim plugins"
    nvim --headless "+Lazy! sync" +qa
  fi
  if command_exists nvim-nightly; then
    print_info "Updating nvim plugins"
    nvim-nightly --headless "+Lazy! sync" +qa
  fi
}

function updateAll() {
  # System installs
  updateApt
  updateFlatpak
  updateSnaps
  updateAppman
  updateAm

  # Shell installs
  updateMise
  updateUv

  # Deprecated
  updateAsdf
  updatePipx

  # Specific applications
  updateTmux
  updateVim
  updateNvim

  record_last_updated "All"
}

function updateSelected() {
  local selected=("$@")

  while [[ -n "${1:-}" ]]; do
    case "$1" in
    'apt')
      updateApt
      ;;
    'flatpak')
      updateFlatpak
      ;;
    'snap')
      updateSnaps
      ;;
    'pipx')
      updatePipx
      ;;
    'uv')
      updateUv
      ;;
    'asdf')
      updateAsdf
      ;;
    'mise')
      updateMise
      ;;
    'appimages')
      updateAppman
      updateAm
      ;;
    'appman')
      updateAppman
      ;;
    'am')
      updateAm
      ;;
    'tmux')
      updateTmux
      ;;
    'vim')
      updateVim
      ;;
    'nvim')
      updateNvim
      ;;
    *)
      throw_error_msg "Unknown option: $1"
      ;;
    esac
    shift
  done

  record_last_updated "${selected[@]}"
}

## Your main implementation goes here.  All of the positional arguments have
## been passed as an array to this function.
function main() {
  if [[ -z "${1:-}" ]]; then
    updateAll
    exit 0
  fi

  local options=("$@")
  local selected=()

  while [[ -n "${1:-}" ]]; do
    case "$1" in
    'help')
      showHelp
      exit 0
      ;;
    'version')
      show_version "exit"
      exit 0
      ;;
    'all')
      updateAll
      exit 0
      ;;
    'apt')
      selected+=("apt")
      ;;
    'flatpak')
      selected+=("flatpak")
      ;;
    'snap' | 'snaps')
      selected+=("snap")
      ;;
    'pipx')
      selected+=("pipx")
      ;;
    'uv')
      selected+=("uv")
      ;;
    'asdf')
      selected+=("asdf")
      ;;
    'mise')
      selected+=("mise")
      ;;
    'appimages' | 'appimage')
      selected+=("appimages")
      ;;
    'appman')
      selected+=("appman")
      ;;
    'am')
      selected+=("am")
      ;;
    'tmux')
      selected+=("tmux")
      ;;
    'vim')
      selected+=("vim")
      ;;
    'nvim' | 'neovim')
      selected+=("nvim")
      ;;
    '--')
      break
      ;;
    *)
      throw_error_msg "Unknown option: $1"
      ;;
    esac
    shift
  done

  updateSelected "${selected[@]}"
}

## This must be the last line
main_handler "$@"
