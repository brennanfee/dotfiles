#!/usr/bin/env bash

### START Bash strict mode
# shellcheck disable=SC2154
([[ -n ${ZSH_EVAL_CONTEXT} && ${ZSH_EVAL_CONTEXT} =~ :file$ ]] ||
  [[ -n ${BASH_VERSION} ]] && (return 0 2>/dev/null)) && SOURCED=true || SOURCED=false
if ! ${SOURCED}; then
  set -o errexit  # same as set -e
  set -o nounset  # same as set -u
  set -o errtrace # same as set -E
  set -o pipefail
  set -o posix
  #set -o xtrace # same as set -x, turn on for debugging

  shopt -s extdebug
  IFS=$(printf '\n\t')
fi
### END Bash strict mode

### START Script template bootstrap

script_name=$(basename "${BASH_SOURCE[0]}")
script_dir="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
script_author="Brennan Fee"
script_license="MIT License"
script_version="0.2"
script_date="2024-09-16"

function cleanup_vars() {
  unset script_name
  unset script_dir
  unset script_author
  unset script_license
  unset script_version
  unset script_date

  cleanup_script_vars
}

# Source script-tools.bash
if [[ -f "${script_dir}/../bash/script-tools.bash" ]]; then
  # shellcheck source=/home/brennan/.dotfiles/bash/script-tools.bash
  source "${script_dir}/../bash/script-tools.bash"
fi

function show_version() {
  print_status "${script_name}"
  print_status "Author: ${script_author} --- License: ${script_license}"
  print_status "Version: ${script_version} --- Date: ${script_date}"
  print_blank_line

  if [[ "${1:-}" == "exit" || "${1:-}" == "yes" ]]; then
    exit 0
  fi
}

### END Script template bootstrap

function cleanup_script_vars() {
  noop
}

function showHelp() {
  show_version ""

  print_status "Do Updates (doup) Help"
  print_blank_line
  print_status "By default, doup updates all the things."
  print_blank_line
  print_status "Optionally you can request a single or a space separated list"
  print_status "of items to update.  The options are:"
  print_blank_line
  print_status "apt, flatpak, snaps, pipx, asdf, appman, tmux, vim, nvim"
  print_blank_line

  exit 0
}

function updateApt() {
  if command_exists apt-get; then
    print_info "Getting updates with apt"
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q update
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q full-upgrade
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q autoremove
  fi
}

function updateFlatpak() {
  if command_exists flatpak; then
    print_info "Getting updates with flatpak"
    flatpak upgrade -y --system
    flatpak upgrade -y --user
  fi
}

function updateSnaps() {
  if command_exists snap; then
    print_info "Getting updates with snap"
    sudo snap refresh
  fi
}

function updatePipx() {
  if command_exists pipx; then
    print_info "Getting updates with pipx"
    pipx upgrade-all --include-injected
  fi
}

function updateAsdf() {
  if command_exists asdf; then
    print_info "Updating asdf"
    asdf update
    print_info "Updating plugins for asdf"
    asdf plugin update --all
    print_info "Updating asdf tools"
    asdf install
  fi
}

function updateAppman() {
  if command_exists appman; then
    # sync
    appman -s
    # update
    appman -u
  fi
}

function updateAm() {
  if command_exists am; then
    # sync
    sudo am -s
    # update
    sudo am -u
  fi
}

function updateTmux() {
  if command_exists tmux; then
    print_info "Updating tmux plugins"
    local tmux_plugin_manager_path="${XDG_CONFIG_HOME:-$HOME/.config}/tmux/plugins"

    # Download the tmux plugin manager if it isn't already there
    if [[ ! -d "${tmux_plugin_manager_path}/tpm" ]]; then
      git clone https://github.com/tmux-plugins/tpm "${tmux_plugin_manager_path}/tpm"
    fi

    if [[ -f "${tmux_plugin_manager_path}/tpm/bin/install_plugins" ]]; then
      "${tmux_plugin_manager_path}/tpm/bin/install_plugins"
    fi
  fi
}

function updateVim() {
  if command_exists vim; then
    print_info "Updating vim plugins"
    mkdir -p "${XDG_CACHE_HOME:-$HOME/.cache}/vim"
    mkdir -p "${XDG_CACHE_HOME:-$HOME/.cache}/zsh"

    # Download vim-plug & initialize the bundles if needed
    if [[ ! -e ${HOME}/.vim/autoload/plug.vim ]]; then
      curl -fsSLo "${HOME}/.vim/autoload/plug.vim" --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    fi

    if [[ -f ${HOME}/.vim/vimrc.bundles ]]; then
      /usr/bin/vim -N -u "${HOME}/.vim/vimrc.bundles" +PlugUpdate +PlugClean! +qa
    fi

    # Create the scratch directories
    mkdir -p "${HOME}/.vim/vimscratch/backup"
    mkdir -p "${HOME}/.vim/vimscratch/swap"
    mkdir -p "${HOME}/.vim/vimscratch/undo"
  fi
}

function updateNvim() {
  if command_exists nvim; then
    print_info "Updating nvim plugins"
    nvim --headless "+Lazy! sync" +qa
  fi
  if command_exists nvim-nightly; then
    print_info "Updating nvim plugins"
    nvim-nightly --headless "+Lazy! sync" +qa
  fi
}

function updateAll() {
  updateApt
  updateFlatpak
  updateSnaps
  updatePipx
  updateAsdf
  updateAppman
  updateAm
  updateTmux
  updateVim
  updateNvim
}

function main() {
  if [[ -z "${1:-}" ]]; then
    updateAll

    # Record last update
    date +"%Y-%m-%d %r : All (default)" >>"${XDG_CACHE_HOME:-$HOME/.cache}/updates.log"

    return
  fi

  options=("$@")

  while [[ -n "${1:-}" ]]; do
    case "$1" in
    'help' | '-h' | '--help')
      showHelp
      ;;
    'version' | '-v' | '-V' | '--version')
      show_version "exit"
      ;;
    'all')
      updateAll
      break
      ;;
    'apt')
      updateApt
      ;;
    'flatpak')
      updateFlatpak
      ;;
    'snap' | 'snaps')
      updateSnaps
      ;;
    'pipx')
      updatePipx
      ;;
    'asdf')
      updateAsdf
      ;;
    'appimages')
      updateAppman
      updateAm
      ;;
    'appman')
      updateAppman
      ;;
    'am')
      updateAm
      ;;
    'tmux')
      updateTmux
      ;;
    'vim')
      updateVim
      ;;
    'nvim' | 'neovim')
      updateNvim
      ;;
    '--')
      break
      ;;
    *)
      throw_error_msg "Unknown option: $1"
      ;;
    esac
    shift
  done

  # Record last update
  (
    IFS=$' '
    date +"%Y-%m-%d %r : ${options[*]}" >>"${XDG_CACHE_HOME:-$HOME/.cache}/updates.log"
  )
}

### START Script main handler

function main_handler() {
  main "$@"
  cleanup_vars
}

main_handler "$@"

### END Script main handler
