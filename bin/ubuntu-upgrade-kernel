#!/usr/bin/env bash

### START Bash strict mode
# shellcheck disable=SC2154
([[ -n ${ZSH_EVAL_CONTEXT} && ${ZSH_EVAL_CONTEXT} =~ :file$ ]] ||
  [[ -n ${BASH_VERSION} ]] && (return 0 2>/dev/null)) && SOURCED=true || SOURCED=false
if ! ${SOURCED}; then
  set -o errexit  # same as set -e
  set -o nounset  # same as set -u
  set -o errtrace # same as set -E
  set -o pipefail
  set -o posix
  #set -o xtrace # same as set -x, turn on for debugging

  shopt -s extdebug
  IFS=$(printf '\n\t')
fi
### END Bash strict mode

### START Script template bootstrap

script_name=$(basename "${BASH_SOURCE[0]}")
script_dir="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
script_author="Brennan Fee"
script_license="MIT License"
script_version="0.2"
script_date="2024-09-16"

function cleanup_vars() {
  unset script_name
  unset script_dir
  unset script_author
  unset script_license
  unset script_version
  unset script_date

  cleanup_script_vars
}

# Source script-tools.bash
if [[ -f "${script_dir}/script-tools.bash" ]]; then
  # shellcheck source=/home/brennan/.dotfiles/bash/script-tools.bash
  source "${script_dir}/script-tools.bash"
fi

function show_version() {
  print_status "${script_name}"
  print_status "Author: ${script_author} --- License: ${script_license}"
  print_status "Version: ${script_version} --- Date: ${script_date}"
  print_blank_line

  if [[ "${1:-}" == "exit" || "${1:-}" == "yes" ]]; then
    exit 0
  fi
}

### END Script template bootstrap

function cleanup_script_vars() {
  noop
}

function main() {
  check_root_with_error ""

  DEBIAN_FRONTEND=noninteractive apt-get -y -q update

  # The HWE kernels use the Ubuntu version numbers rather than the codename
  local release_ver
  release_ver=$(lsb_release -r -s 2>/dev/null)

  local hwe_edge_exists=0
  if apt_package_exists "linux-generic-hwe-${release_ver}-edge"; then
    hwe_edge_exists=1
  fi

  local hwe_exists=0
  if apt_package_exists "linux-generic-hwe-${release_ver}"; then
    hwe_exists=1
  fi

  local kernel_to_install="none"
  if [[ "${1:-}" == "--edge" ]]; then
    if [[ "${hwe_edge_exists}" == "1" ]]; then
      kernel_to_install="hwe-edge"
    elif [[ "${hwe_exists}" == "0" ]]; then
      print_status "The edge kernel is not available, but the standard HWE kernel is.  Selecting the HWE kernel."
      kernel_to_install="hwe"
    fi
  else
    if [[ "${hwe_exists}" == "1" ]]; then
      kernel_to_install="hwe"
    fi
  fi

  case "${kernel_to_install}" in
  hwe)
    print_status "HWE kernel found, installing..."

    DEBIAN_FRONTEND=noninteractive apt-get -y -q install "linux-generic-hwe-${release_ver}" \
      linux-firmware

    local tools_exists=0
    if apt_package_exists "linux-tools-generic-hwe-${release_ver}"; then
      tools_exists=1
    fi

    if [[ "${tools_exists}" == "1" ]]; then
      DEBIAN_FRONTEND=noninteractive apt-get -y -q install "linux-tools-generic-hwe-${release_ver}"
    fi

    DEBIAN_FRONTEND=noninteractive apt-get -y -q autoremove

    print_success "HWE kernel install complete.  It is HIGHLY recommended to reboot."
    ;;
  hwe-edge)
    print_status "HWE-Edge kernel found, installing..."

    DEBIAN_FRONTEND=noninteractive apt-get -y -q install "linux-generic-hwe-${release_ver}-edge" \
      "linux-tools-generic-hwe-${release_ver}-edge" linux-firmware

    local tools_exists=0
    if apt_package_exists "linux-tools-generic-hwe-${release_ver}-edge"; then
      tools_exists=1
    fi

    if [[ "${tools_exists}" == "1" ]]; then
      DEBIAN_FRONTEND=noninteractive apt-get -y -q install "linux-tools-generic-hwe-${release_ver}-edge"
    fi

    DEBIAN_FRONTEND=noninteractive apt-get -y -q autoremove

    print_success "HWE-Edge kernel install complete.  It is HIGHLY recommended to reboot."
    ;;
  none)
    print_status "No HWE kernels are available. Please try again later."
    ;;
  *)
    throw_error_msg "ERROR! Unable to determine which kernel to install."
    ;;
  esac
}

### START Script main handler

function main_handler() {
  main "$@"
  cleanup_vars
}

main_handler "$@"

### END Script main handler
