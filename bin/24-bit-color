#!/usr/bin/env bash
#
# This file was originally taken from iterm2 https://github.com/gnachman/iTerm2/blob/master/tests/24-bit-color.sh
#
#   This file echoes a bunch of 24-bit color codes
#   to the terminal to demonstrate its functionality.
#   The foreground escape sequence is ^[38;2;<r>;<g>;<b>m
#   The background escape sequence is ^[48;2;<r>;<g>;<b>m
#   <r> <g> <b> range from 0 to 255 inclusive.
#   The escape sequence ^[0m returns output to default

### START Bash strict mode
# shellcheck disable=SC2154
([[ -n ${ZSH_EVAL_CONTEXT} && ${ZSH_EVAL_CONTEXT} =~ :file$ ]] ||
  [[ -n ${BASH_VERSION} ]] && (return 0 2>/dev/null)) && SOURCED=true || SOURCED=false
if ! ${SOURCED}; then
  set -o errexit  # same as set -e
  set -o nounset  # same as set -u
  set -o errtrace # same as set -E
  set -o pipefail
  set -o posix
  #set -o xtrace # same as set -x, turn on for debugging

  shopt -s extdebug
  IFS=$(printf '\n\t')
fi
### END Bash strict mode

shopt -s inherit_errexit

### START Script template bootstrap

script_name=$(basename "${BASH_SOURCE[0]}")
script_dir="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
script_author="Brennan Fee"
script_license="MIT License"
script_version="0.2"
script_date="2024-09-16"

function cleanup_vars() {
  unset script_name
  unset script_dir
  unset script_author
  unset script_license
  unset script_version
  unset script_date

  cleanup_script_vars
}

# Source script-tools.bash
if [[ -f "${script_dir}/../bash/script-tools.bash" ]]; then
  # shellcheck source=/home/brennan/.dotfiles/bash/script-tools.bash
  source "${script_dir}/../bash/script-tools.bash"
fi

function show_version() {
  print_status "${script_name}"
  print_status "Author: ${script_author} --- License: ${script_license}"
  print_status "Version: ${script_version} --- Date: ${script_date}"
  print_blank_line

  if [[ "${1:-}" == "exit" || "${1:-}" == "yes" ]]; then
    exit 0
  fi
}

### END Script template bootstrap

function cleanup_script_vars() {
  noop
}

function setBackgroundColor() {
  #printf '\x1bPtmux;\x1b\x1b[48;2;%s;%s;%sm' $1 $2 $3
  printf '\x1b[48;2;%s;%s;%sm' "$1" "${2:-}" "${3:-}"
}

function resetOutput() {
  echo -en "\x1b[0m\n"
}

# Gives a color $1/255 % along HSV
# Who knows what happens when $1 is outside 0-255
# Echoes "$red $green $blue" where
# $red $green and $blue are integers
# ranging between 0 and 255 inclusive
function rainbowColor() {
  local h
  local f
  local t
  local q

  ((h = $1 / 43))
  ((f = $1 - 43 * h))
  ((t = f * 255 / 43))
  ((q = 255 - t))

  if [[ ${h} -eq 0 ]]; then
    echo "255 ${t} 0"
  elif [[ ${h} -eq 1 ]]; then
    echo "${q} 255 0"
  elif [[ ${h} -eq 2 ]]; then
    echo "0 255 ${t}"
  elif [[ ${h} -eq 3 ]]; then
    echo "0 ${q} 255"
  elif [[ ${h} -eq 4 ]]; then
    echo "${t} 0 255"
  elif [[ ${h} -eq 5 ]]; then
    echo "255 0 ${q}"
  else
    # execution should never reach here
    echo "0 0 0"
  fi
}

function main() {
  for i in $(seq 0 127); do
    setBackgroundColor "${i}" 0 0
    echo -en " "
  done
  resetOutput
  for i in $(seq 255 -1 128); do
    setBackgroundColor "${i}" 0 0
    echo -en " "
  done
  resetOutput

  for i in $(seq 0 127); do
    setBackgroundColor 0 "${i}" 0
    echo -n " "
  done
  resetOutput
  for i in $(seq 255 -1 128); do
    setBackgroundColor 0 "${i}" 0
    echo -n " "
  done
  resetOutput

  for i in $(seq 0 127); do
    setBackgroundColor 0 0 "${i}"
    echo -n " "
  done
  resetOutput
  for i in $(seq 255 -1 128); do
    setBackgroundColor 0 0 "${i}"
    echo -n " "
  done
  resetOutput

  local the_color
  for i in $(seq 0 127); do
    the_color=$(rainbowColor "${i}")
    setBackgroundColor "${the_color}"
    echo -n " "
  done
  resetOutput
  for i in $(seq 255 -1 128); do
    the_color=$(rainbowColor "${i}")
    setBackgroundColor "${the_color}"
    echo -n " "
  done
  resetOutput
}

### START Script main handler

function main_handler() {
  main "$@"
  cleanup_vars
}

main_handler "$@"

### END Script main handler
