#!/usr/bin/env bash

### START Bash strict mode
# shellcheck disable=SC2154
([[ -n ${ZSH_EVAL_CONTEXT} && ${ZSH_EVAL_CONTEXT} =~ :file$ ]] ||
  [[ -n ${BASH_VERSION} ]] && (return 0 2>/dev/null)) && SOURCED=true || SOURCED=false
if ! ${SOURCED}; then
  set -o errexit  # same as set -e
  set -o nounset  # same as set -u
  set -o errtrace # same as set -E
  set -o pipefail
  set -o posix
  #set -o xtrace # same as set -x, turn on for debugging

  shopt -s extdebug
  IFS=$(printf '\n\t')
fi
### END Bash strict mode

###################################################################################################
### START Script template bootstrap

g_script_name=$(basename "${BASH_SOURCE[0]}")
g_script_dir="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"

g_short_options=""
g_long_options=""
g_positional_arguments=""

function cleanup_vars() {
  unset g_script_name
  unset g_script_dir
  unset g_script_author
  unset g_script_license
  unset g_script_version
  unset g_script_date

  unset g_short_options
  unset g_long_options
  unset g_positional_arguments

  cleanup_script_vars
}

function load_script_tools() {
  local dotfiles
  dotfiles="${DOTFILES:-$(xdg-user-dir DOTFILES)}"
  # Source script-tools.bash
  if [[ -f "${dotfiles}/bash/script-tools.bash" ]]; then
    # shellcheck source=/home/brennan/.dotfiles/bash/script-tools.bash
    source "${dotfiles}/bash/script-tools.bash"
  fi
}

function show_version() {
  print_out "Application: ${g_script_name}"
  print_out "Author: ${g_script_author} --- License: ${g_script_license}"
  print_out "Version: ${g_script_version} --- Date: ${g_script_date}"
  print_blank_line
}

function show_help() {
  show_version
  print_help
}

function set_short_options() {
  g_short_options="$1"
}

function set_long_options() {
  g_long_options="$1"
}

function process_arguments() {
  local args
  set +o errexit # temporarily turn off error on exit
  args=$(getopt --name "${g_script_name}" --options "${g_short_options}hv" \
    --longoptions "${g_long_options},help,version" -- "$@")
  # Handle if getopt returned an error
  # shellcheck disable=SC2181
  if [[ $? -gt 0 ]]; then
    show_help
    exit 1
  fi
  set -o errexit # turn error on exit back on

  eval set -- "${args}"

  ## Handle the required options, help & version, bypass everything else
  local flags=("$@")
  local i=0
  while [[ "$i" -lt "${#flags[@]}" ]]; do
    local flag=${flags[i]}
    if [[ "${flag}" == "-h" || "${flag}" == "--help" ]]; then
      show_help
      exit 0
    elif [[ "${flag}" == "-v" || "${flag}" == "--version" ]]; then
      show_version
      exit 0
    elif [[ "${flag}" == "--" ]]; then
      break
    fi
    i=$((i + 1))
  done

  # Split up the flags and positionals
  local flags=() positional_arguments=()
  local reached_positionals=0
  while [[ $# -gt 0 ]]; do
    if [[ "$1" == "--" ]]; then
      reached_positionals=1
      shift
    else
      if [[ "${reached_positionals}" -eq 1 ]]; then
        positional_arguments+=("$1")
        shift
      else
        flags+=("$1")
        shift
      fi
    fi
  done

  process_flags "${flags[@]}"
  g_positional_arguments=("${positional_arguments[@]}")
}

## USAGE: First parameter should be the number of expected (required) positional arguments.
## Optionally, you can pass in a second argument to customize the error message.
function validate_number_of_positional_arguments() {
  local expected_arguments=$1
  local error_msg="${2:-Invalid number of arguments, expected at least ${expected_arguments}.}"

  if [[ "${#g_positional_arguments[@]}" -lt ${expected_arguments} ]]; then
    print_error "${error_msg}"
    show_help
    exit 1
  fi
}

function main_handler() {
  load_script_tools
  setup_script_vars
  setup_options
  process_arguments "$@"
  main "${g_positional_arguments[@]}"
  cleanup_vars
}

### END Script template bootstrap
###################################################################################################

g_script_author="Brennan Fee"
g_script_license="MIT License"
g_script_version="0.1"
g_script_date="2025-06-05"

## USAGE: If you want any global variables, set them up here
function setup_script_vars() {
  g_show_host="default"
}

## USAGE: If you add any global variables, clean them up in this method
function cleanup_script_vars() {
  unset g_show_host
}

## USAGE: If you need to add any command-line flags or options, do it here.
## You should call one or both of the helper methods set_short_options or
## set_long_options.  They accept a string with syntax that is the same for
## the getopt program.  See it's help for more information.
function setup_options() {
  set_long_options "show-host:"
}

## Usage: If you added command-line flags or options using setup_options,
## process them here.  The flags and their values will be passed as an array
## directly into this method so you can process them however you wish,
## including using 'shift' as you loop.
function process_flags() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
    '--show-host')
      g_show_host=$(echo "$2" | tr "[:upper:]" "[:lower:]")
      if [[ ${g_show_host} != "default" && ${g_show_host} != "always" && ${g_show_host} != "never" ]]; then
        throw_error_msg "Unknown value for 'show-host' option.  Valid values are 'default', 'always', 'never'."
      fi

      shift 2
      ;;
    '--')
      shift
      break
      ;;
    *)
      throw_error_msg "Unknown option: $1"
      ;;
    esac
  done
}

## USAGE: Construct your help screen text here.
function print_help() {
  print_out "  ${g_script_name} [options]"
  print_blank_line
  print_out "This program displays a symbol for the host of the git repository.  Optionally it can also "
  print_out "print the url hostname."
  print_blank_line
  print_out "Options:"
  print_blank_line
  print_out "  -h or --help"
  print_out "      Show this help screen."
  print_blank_line
  print_out "  -v or --version"
  print_out "     Show the version number."
  print_blank_line
  print_out "  --show-host (default,always,never)"
  print_out "     Whether to include the hostname.  Always will always display it, never will never display"
  print_out "     it, and default will display it only when necessary (the location is not one of the well"
  print_out "     known locations like github.com, bitbucket.com, etc.)"
  print_blank_line
}

## Your main implementation goes here.  All of the positional arguments have been passed as an array
## to this function.
function main() {
  local git_remote
  local git_host
  local git_remote_symbol=""
  local host_needed=0
  local response

  if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    git_remote=$(git ls-remote --get-url 2>/dev/null)

    ## 3 formats https://host/path, ssh://user@host/path, git@host:path
    if [[ ${git_remote} == http* ]]; then
      git_host="$(echo "${git_remote}" | cut -d'/' -f3)"
    elif [[ ${git_remote} == git@* ]]; then
      git_host="$(echo "${git_remote}" | cut -d':' -f1 | cut -d'@' -f2)"
    else
      ## ssh version
      git_host="$(echo "${git_remote}" | cut -d'/' -f3)"
      if [[ ${git_host} == *"@"* ]]; then
        git_host="$(echo "${git_host}" | cut -d'@' -f2)"
      fi
    fi

    if [[ "${git_remote}" =~ "github" ]]; then
      git_remote_symbol=""
      git_host="github.com"
    elif [[ "${git_remote}" =~ "gitlab" ]]; then
      git_remote_symbol=""
      git_host="gitlab.com"
    elif [[ "${git_remote}" =~ "bitbucket" ]]; then
      git_remote_symbol=""
      git_host="bitbucket.com"
    elif [[ "${git_remote}" =~ "git" ]]; then
      git_remote_symbol=""
      host_needed=1
    else
      git_remote_symbol=""
      git_host="localhost"
      host_needed=1
    fi
  else
    git_remote_symbol=""
    git_host="Not a repository."
    host_needed=1
  fi

  response="${git_remote_symbol}"
  case "${g_show_host}" in
  "default")
    if [[ "${host_needed}" -eq 1 ]]; then
      response+=" ${git_host}"
    fi
    ;;
  "always")
    response+=" ${git_host}"
    ;;
  "never") ;;
  *)
    throw_error_msg "Unexecpeted show host value."
    ;;
  esac

  echo "${response}"
}

## This must be the last line
main_handler "$@"
