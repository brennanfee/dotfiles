#!/usr/bin/env bash
# Author: Brennan Fee
# License: MIT License
# Version: 0.2
# Date: 2023-06-23

# Bash strict mode
([[ -n ${ZSH_EVAL_CONTEXT:-} && ${ZSH_EVAL_CONTEXT:-} =~ :file$ ]] ||
  [[ -n ${BASH_VERSION:-} ]] && (return 0 2>/dev/null)) && SOURCED=true || SOURCED=false
if ! ${SOURCED}; then
  set -o errexit  # same as set -e
  set -o nounset  # same as set -u
  set -o errtrace # same as set -E
  set -o pipefail
  set -o posix
  #set -o xtrace # same as set -x, turn on for debugging

  shopt -s inherit_errexit
  shopt -s extdebug
  IFS=$(printf '\n\t')
fi

SCRIPT_DIR="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# END Bash strict mode

SCRIPT_APP=$(basename "$0")
SCRIPT_AUTHOR="Brennan Fee"
SCRIPT_LICENSE="MIT License"
SCRIPT_VERSION="0.2"
SCRIPT_DATE="2023-06-23"

source "$(xdg-user-dir DOTFILES)/bash/script-tools.bash"

## Defaults
INCLUDE_DEV_TOOLS="false"

#### START: Process arguments

ARGS=$(getopt --name "${SCRIPT_APP}" --options dhv --longoptions "include-dev,help,version" -- "$@")

eval set -- "${ARGS}"
unset ARGS

while true; do
  case "$1" in
  '-h' | '--help')
    show_help
    ;;
  '-v' | '--version')
    show_version
    ;;
  '-d' | '--include-dev')
    INCLUDE_DEV_TOOLS="true"
    shift
    continue
    ;;
  '--')
    shift
    break
    ;;
  *)
    error_msg "Unknown option: $1"
    ;;
  esac
done

#### END: Process arguments

#### START: Help

function show_version() {
  print_status "${SCRIPT_APP}"
  print_status "Author: ${SCRIPT_AUTHOR}    License: ${SCRIPT_LICENSE}"
  print_stauts "Version: ${SCRIPT_VERSION}    Date: ${SCRIPT_DATE}"
  blank_line

  exit 0
}

function show_help() {
  print_status "${SCRIPT_APP}"
  print_status "Author: ${SCRIPT_AUTHOR}    License: ${SCRIPT_LICENSE}"
  print_stauts "Version: ${SCRIPT_VERSION}    Date: ${SCRIPT_DATE}"
  blank_line

  print_status "  ${APP} [options]"
  blank_line
  print_status "This program sets up Pipx and installs my desired applications/tools."
  blank_line
  print_status "Options:"
  blank_line
  print_status "  -h or --help"
  print_status "      Show this help screen."
  blank_line
  print_status "  -v or --version"
  print_stauts "     Show the version number."
  blank_line
  print_status "  -d or --include-dev"
  print_status "     Also install the tools for a development environment."
  blank_line

  exit 0
}

#### END: Help

function check_prerequisites() {
  # Check for pipx itself, if needed install it
  if ! command -v pipx &>/dev/null; then
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q update
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q install pipx
  fi
}

function install_common_tools() {
  # Common tools for all installations
  pipx install invoke
  pipx install yt-dlp
  #pipx install streamdeck-ui
}

function install_dev_tools() {
  # Tools mostly needed only in dev environments

  # Ansible
  pipx install --include-deps ansible
  pipx inject ansible cryptography
  pipx inject ansible paramiko
  pipx inject ansible dnspython

  # Molecule
  pipx install molecule
  pipx inject molecule molecule-plugins
  pipx inject molecule "molecule-plugins[vagrant]"
  pipx inject molecule python-vagrant
  pipx inject molecule dnspython

  pipx install poetry
}

function main() {
  check_prerequisites

  install_common_tools

  if [[ "${INCLUDE_DEV_TOOLS}" == "true" ]]; then
    install_dev_tools
  fi

  # Upgrade them all
  pipx upgrade-all
}

main "$@"
