#!/usr/bin/env bash
#
# AppMan (and am) are tools for installing, updating, and managing AppImages
# Page to look for apps to install: https://portable-linux-apps.github.io/apps.html

# Bash strict mode
([[ -n ${ZSH_EVAL_CONTEXT:-} && ${ZSH_EVAL_CONTEXT:-} =~ :file$ ]] ||
  [[ -n ${BASH_VERSION:-} ]] && (return 0 2>/dev/null)) && SOURCED=true || SOURCED=false
if ! ${SOURCED}; then
  set -o errexit  # same as set -e
  set -o nounset  # same as set -u
  set -o errtrace # same as set -E
  set -o pipefail
  set -o posix
  #set -o xtrace # same as set -x, turn on for debugging

  shopt -s inherit_errexit
  shopt -s extdebug
  IFS=$(printf '\n\t')
fi
# END Bash strict mode

SCRIPT_APP=$(basename "$0")
SCRIPT_AUTHOR="Brennan Fee"
SCRIPT_LICENSE="MIT License"
SCRIPT_VERSION="0.2"
SCRIPT_DATE="2023-06-23"

source "$(dirname "$0")/../bash/script-tools.bash"

## Defaults
INCLUDE_DEV_TOOLS="false"

#### START: Process arguments

ARGS=$(getopt --name "${SCRIPT_APP}" --options dhv --longoptions "include-dev,help,version" -- "$@")

eval set -- "${ARGS}"
unset ARGS

## Process "options" and "flags"
while true; do
  case "$1" in
  '-h' | '--help')
    show_help
    ;;
  '-v' | '--version')
    show_version
    ;;
  '-d' | '--include-dev')
    INCLUDE_DEV_TOOLS="true"
    shift
    continue
    ;;
  '--')
    shift
    break
    ;;
  *)
    error_msg "Unknown option: $1"
    ;;
  esac
done

#### END: Process arguments

#### START: Help

function show_version() {
  print_status "${SCRIPT_APP}"
  print_status "Author: ${SCRIPT_AUTHOR}    License: ${SCRIPT_LICENSE}"
  print_stauts "Version: ${SCRIPT_VERSION}    Date: ${SCRIPT_DATE}"
  blank_line

  exit 0
}

function show_help() {
  print_status "${SCRIPT_APP}"
  print_status "Author: ${SCRIPT_AUTHOR}    License: ${SCRIPT_LICENSE}"
  print_stauts "Version: ${SCRIPT_VERSION}    Date: ${SCRIPT_DATE}"
  blank_line

  print_status "  ${APP} [options]"
  blank_line
  print_status "This program sets up AppMan and installs my desired applications/tools."
  print_status "AppMan is a tool for managing Linux AppImages."
  blank_line
  print_status "Options:"
  blank_line
  print_status "  -h or --help"
  print_status "      Show this help screen."
  blank_line
  print_status "  -v or --version"
  print_stauts "     Show the version number."
  blank_line
  print_status "  -d or --include-dev"
  print_status "     Also install the tools for a development environment."
  blank_line

  exit 0
}

#### END: Help

# Page to look for apps to install: https://portable-linux-apps.github.io/apps.html
function check_prerequisites() {
  if ! command -v zsync &>/dev/null; then
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q update
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q install zsync
  fi

  # Check for appman itself, if needed install it
  if ! command -v appman &>/dev/null; then
    mkdir -p ~/.local/bin/
    wget -q -O ~/.local/bin/appman https://raw.githubusercontent.com/ivan-hc/AppMan/main/appman
    chmod +x ~/.local/bin/appman
  fi
}

function install_if_needed() {
  if [[ ! -x "${HOME}/.local/bin/${1}" ]]; then
    ~/.local/bin/appman -i "${1}"
  fi
}

function install_common_tools() {
  install_if_needed nvim
  install_if_needed obsidian
  install_if_needed espanso
}

function install_dev_tools() {
  true # Nothing at present
}

function main() {
  check_prerequisites

  # Update appman itself first
  ~/.local/bin/appman -s

  install_common_tools

  if [[ "${INCLUDE_DEV_TOOLS}" == "true" ]]; then
    install_dev_tools
  fi

  # Update all of them
  ~/.local/bin/appman -U
}

main "$@"
