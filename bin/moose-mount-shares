#!/usr/bin/env bash

### START Bash strict mode
# shellcheck disable=SC2154
([[ -n ${ZSH_EVAL_CONTEXT} && ${ZSH_EVAL_CONTEXT} =~ :file$ ]] ||
  [[ -n ${BASH_VERSION} ]] && (return 0 2>/dev/null)) && SOURCED=true || SOURCED=false
if ! ${SOURCED}; then
  set -o errexit  # same as set -e
  set -o nounset  # same as set -u
  set -o errtrace # same as set -E
  set -o pipefail
  set -o posix
  #set -o xtrace # same as set -x, turn on for debugging

  shopt -s extdebug
  IFS=$(printf '\n\t')
fi
### END Bash strict mode

### START Script template bootstrap

script_name=$(basename "${BASH_SOURCE[0]}")
script_dir="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
script_author="Brennan Fee"
script_license="MIT License"
script_version="0.3"
script_date="2024-09-16"

function cleanup_vars() {
  unset script_name
  unset script_dir
  unset script_author
  unset script_license
  unset script_version
  unset script_date

  cleanup_script_vars
}

# Source script-tools.bash
if [[ -f "${script_dir}/../bash/script-tools.bash" ]]; then
  # shellcheck source=/home/brennan/.dotfiles/bash/script-tools.bash
  source "${script_dir}/../bash/script-tools.bash"
fi

function show_version() {
  print_status "${script_name}"
  print_status "Author: ${script_author} --- License: ${script_license}"
  print_status "Version: ${script_version} --- Date: ${script_date}"
  print_blank_line

  if [[ "${1:-}" == "exit" || "${1:-}" == "yes" ]]; then
    exit 0
  fi
}

### END Script template bootstrap

## Defaults
FORCE="false"

function cleanup_script_vars() {
  unset FORCE
}

function process_arguments() {
  local args
  args=$(getopt --name "${script_name}" --options fhv --longoptions "force,help,version" -- "$@")

  # Show help if no parameters were passed
  #
  # shellcheck disable=SC2181
  # if [[ $? -ne 0 ]]; then
  #   show_help
  # fi

  eval set -- "${args}"

  # Process flags and options
  #
  while true; do
    case "$1" in
    '-h' | '--help')
      show_help
      ;;
    '-v' | '--version')
      show_version "exit"
      ;;
    '-f' | '--force')
      FORCE="true"
      shift
      continue
      ;;
    '--')
      shift
      break
      ;;
    *)
      throw_error_msg "Unknown option: $1"
      ;;
    esac
  done

  # Process positional arguments
  #
  # local arg_count=1
  # for arg; do
  #   case "${arg_count}" in
  #   1)
  #     # VAR=${arg}
  #     ;;
  #   2)
  #     # OTHER=$(echo "${arg}" | tr "[:upper:]" "[:lower:]")
  #     ;;
  #   3)
  #     break
  #     ;;
  #   *)
  #     throw_error_msg "Internal Argument Error"
  #     ;;
  #   esac
  #   arg_count=$((arg_count + 1))
  # done
}

function show_help() {
  show_version

  print_status "  ${script_name} [options]"
  print_blank_line
  print_status "This script mounts my MooseFS shares into the profile directory tree."
  print_blank_line
  print_status "Options:"
  print_blank_line
  print_status "  -h or --help"
  print_status "      Show this help screen."
  print_blank_line
  print_status "  -v or --version"
  print_status "     Show the version number."
  print_blank_line
  print_status "  -f or --force"
  print_status "     Force mount."
  print_blank_line

  exit 0
}

#### END: Help

function main() {
  local option=""
  local xdg_dotfiles
  local script

  if [[ "${FORCE}" == "true" ]]; then
    option="--force"
  fi

  if ! command -v "kwalletcli" >/dev/null; then
    print_warning "WARNING! kwalletcli not installed or on path.  Install it first!"
    return 0
  fi

  if ! command -v "mfsmount" >/dev/null; then
    print_warning "WARNING! moosefs is not installed, skipping mounting volumes."
    return 0
  fi

  xdg_dotfiles="$(xdg-user-dir DOTFILES)"
  script="${xdg_dotfiles:-${DOTFILES}}/bin/moose-mount"
  if [[ -x "${script}" ]]; then
    bash "${script}" "files" "${option}"
    bash "${script}" "other" "${option}"
    bash "${script}" "backups" "${option}"
  fi
}

### START Script main handler

function main_handler() {
  local args=("$@")
  process_arguments "$@"

  main "${args[@]}"
  cleanup_vars
}

main_handler "$@"

### END Script main handler
