#!/usr/bin/env bash

# Bash strict mode
([[ -n ${ZSH_EVAL_CONTEXT:-} && ${ZSH_EVAL_CONTEXT:-} =~ :file$ ]] ||
  [[ -n ${BASH_VERSION:-} ]] && (return 0 2>/dev/null)) && SOURCED=true || SOURCED=false
if ! ${SOURCED}; then
  set -o errexit  # same as set -e
  set -o nounset  # same as set -u
  set -o errtrace # same as set -E
  set -o pipefail
  set -o posix
  #set -o xtrace # same as set -x, turn on for debugging

  shopt -s inherit_errexit
  shopt -s extdebug
  IFS=$(printf '\n\t')
fi
# END Bash strict mode

SCRIPT_APP=$(basename "$0")
SCRIPT_AUTHOR="Brennan Fee"
SCRIPT_LICENSE="MIT License"
SCRIPT_VERSION="0.2"
SCRIPT_DATE="2023-06-23"

source "$(dirname "$0")/../bash/script-tools.bash"

## Defaults
FORCE="false"

#### START: Process arguments

ARGS=$(getopt --name "${SCRIPT_APP}" --options fhv --longoptions "force,help,version" -- "$@")

eval set -- "${ARGS}"
unset ARGS

while true; do
  case "$1" in
  '-h' | '--help')
    show_help
    ;;
  '-v' | '--version')
    show_version
    ;;
  '-f' | '--force')
    FORCE="true"
    shift
    continue
    ;;
  '--')
    shift
    break
    ;;
  *)
    error_msg "Unknown option: $1"
    ;;
  esac
done

#### END: Process arguments

#### START: Help

function show_version() {
  print_status "${SCRIPT_APP}"
  print_status "Author: ${SCRIPT_AUTHOR}    License: ${SCRIPT_LICENSE}"
  print_stauts "Version: ${SCRIPT_VERSION}    Date: ${SCRIPT_DATE}"
  blank_line

  exit 0
}

function show_help() {
  print_status "${SCRIPT_APP}"
  print_status "Author: ${SCRIPT_AUTHOR}    License: ${SCRIPT_LICENSE}"
  print_stauts "Version: ${SCRIPT_VERSION}    Date: ${SCRIPT_DATE}"
  blank_line

  print_status "  ${SCRIPT_APP} [options]"
  blank_line
  print_status "This script mounts my MooseFS shares into the profile directory tree."
  blank_line
  print_status "Options:"
  blank_line
  print_status "  -h or --help"
  print_status "      Show this help screen."
  blank_line
  print_status "  -v or --version"
  print_stauts "     Show the version number."
  blank_line
  print_status "  -f or --force"
  print_status "     Force mount."
  blank_line

  exit 0
}

#### END: Help

function main() {
  local option=""
  local xdg_dotfiles
  local script

  if [[ "${FORCE}" == "true" ]]; then
    option="--force"
  fi

  if ! command -v "kwalletcli" >/dev/null; then
    print_warning "WARNING! kwalletcli not installed or on path.  Install it first!"
    return 0
  fi

  if ! command -v "mfsmount" >/dev/null; then
    print_warning "WARNING! moosefs is not installed, skipping mounting volumes."
    return 0
  fi

  xdg_dotfiles="$(xdg-user-dir DOTFILES)"
  script="${xdg_dotfiles:-${DOTFILES}}/bin/moose-mount"
  if [[ -x "${script}" ]]; then
    bash "${script}" "files" "${option}"
    bash "${script}" "other" "${option}"
    bash "${script}" "backups" "${option}"
  fi
}

main "$@"
