#!/usr/bin/env bash

### START Bash strict mode
# shellcheck disable=SC2154
([[ -n ${ZSH_EVAL_CONTEXT} && ${ZSH_EVAL_CONTEXT} =~ :file$ ]] ||
  [[ -n ${BASH_VERSION} ]] && (return 0 2>/dev/null)) && SOURCED=true || SOURCED=false
if ! ${SOURCED}; then
  set -o errexit  # same as set -e
  set -o nounset  # same as set -u
  set -o errtrace # same as set -E
  set -o pipefail
  set -o posix
  #set -o xtrace # same as set -x, turn on for debugging

  shopt -s extdebug
  IFS=$(printf '\n\t')
fi
### END Bash strict mode

### START Script template bootstrap

script_name=$(basename "${BASH_SOURCE[0]}")
script_dir="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
script_author="Brennan Fee"
script_license="MIT License"
script_version="0.3"
script_date="2024-09-16"

function cleanup_vars() {
  unset script_name
  unset script_dir
  unset script_author
  unset script_license
  unset script_version
  unset script_date

  cleanup_script_vars
}

# Source script-tools.bash
if [[ -f "${script_dir}/../bash/script-tools.bash" ]]; then
  # shellcheck source=/home/brennan/.dotfiles/bash/script-tools.bash
  source "${script_dir}/../bash/script-tools.bash"
fi

function show_version() {
  print_status "${script_name}"
  print_status "Author: ${script_author} --- License: ${script_license}"
  print_status "Version: ${script_version} --- Date: ${script_date}"
  print_blank_line

  if [[ "${1:-}" == "exit" || "${1:-}" == "yes" ]]; then
    exit 0
  fi
}

### END Script template bootstrap

## Defaults
include_dev_tools="false"

function cleanup_script_vars() {
  unset include_dev_tools
}

function process_arguments() {
  local args
  args=$(getopt --name "${script_name}" --options dhv --longoptions "include-dev,help,version" -- "$@")

  eval set -- "${args}"

  # Show help if no parameters were passed
  #
  # shellcheck disable=SC2181
  # if [[ $? -ne 0 ]]; then
  #   show_help
  # fi

  # Process flags and options
  #
  while true; do
    case "$1" in
    '-h' | '--help')
      show_help
      ;;
    '-v' | '--version')
      show_version "exit"
      ;;
    '-d' | '--include-dev')
      include_dev_tools="true"
      shift
      continue
      ;;
    '--')
      shift
      break
      ;;
    *)
      throw_error_msg "Unknown option: $1"
      ;;
    esac
  done

  # Process positional arguments
  #
  # local arg_count=1
  # for arg; do
  #   case "${arg_count}" in
  #   1)
  #     # VAR=${arg}
  #     ;;
  #   2)
  #     # OTHER=$(echo "${arg}" | tr "[:upper:]" "[:lower:]")
  #     ;;
  #   3)
  #     break
  #     ;;
  #   *)
  #     throw_error_msg "Internal Argument Error"
  #     ;;
  #   esac
  #   arg_count=$((arg_count + 1))
  # done
}

#### START: Help

function show_help() {
  show_version ""

  print_status "  ${script_name} [options]"
  print_blank_line
  print_status "This program sets up ASDF version manager and installs my desired"
  print_status "applications/tools."
  print_blank_line
  print_status "Options:"
  print_blank_line
  print_status "  -h or --help"
  print_status "      Show this help screen."
  print_blank_line
  print_status "  -v or --version"
  print_status "     Show the version number."
  print_blank_line
  print_status "  -d or --include-dev"
  print_status "     Also install the tools for a development environment."
  print_blank_line

  exit 0
}

#### END: Help

function check_prerequisites() {
  if ! command -v asdf &>/dev/null; then
    git clone https://github.com/asdf-vm/asdf.git "${XDG_DATA_HOME}/asdf" --branch v0.12.0

    msg="The 'asdf' utility was installed.  You will need to close and re-open the terminal."
    msg="${msg} Re-run this script again after re-opening the terminal to install asdf tools."

    print_warning "${msg}"
    exit 10
  fi
}

function add_if_needed() {
  local installed
  installed=$(asdf plugin list | grep -i "${1}" || true)
  if [[ "${installed}" != "${1}" ]]; then
    asdf plugin add "${1}"
  fi
}

# TODO: To support a separate list of common tools and "dev" tools, I will
# need to have two separate ~/.tool-versions files in my dotfiles.  So, for the
# time being I have them all in common tools
#
# The split that I would like is to have only the following in "common":
#   golang, nodejs, python, packer, terraform
# With all the rest being for "dev" environments only

function install_common_tools() {
  add_if_needed dotnet
  add_if_needed golang
  add_if_needed java
  add_if_needed kotlin
  add_if_needed nodejs
  add_if_needed packer
  add_if_needed python
  add_if_needed ruby
  add_if_needed rust
  add_if_needed semver
  add_if_needed terraform
}

function install_dev_tools() {
  true # Nothing at this time
}

function main() {
  check_prerequisites

  # Update asdf itself
  asdf update

  install_common_tools

  if [[ "${include_dev_tools}" == "true" ]]; then
    install_dev_tools
  fi

  # Now update all plugins
  asdf plugin update --all

  # Now install the tools
  asdf install
}

### START Script main handler

function main_handler() {
  local args=("$@")
  process_arguments "$@"

  main "${args[@]}"
  cleanup_vars
}

main_handler "$@"

### END Script main handler
