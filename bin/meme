#!/usr/bin/env bash

### START Bash strict mode
# shellcheck disable=SC2154
([[ -n ${ZSH_EVAL_CONTEXT} && ${ZSH_EVAL_CONTEXT} =~ :file$ ]] ||
  [[ -n ${BASH_VERSION} ]] && (return 0 2>/dev/null)) && SOURCED=true || SOURCED=false
if ! ${SOURCED}; then
  set -o errexit  # same as set -e
  set -o nounset  # same as set -u
  set -o errtrace # same as set -E
  set -o pipefail
  set -o posix
  #set -o xtrace # same as set -x, turn on for debugging

  shopt -s extdebug
  IFS=$(printf '\n\t')
fi
### END Bash strict mode

### START Script template bootstrap

g_script_name=$(basename "${BASH_SOURCE[0]}")
g_script_dir="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
g_script_author="Brennan Fee"
g_script_license="MIT License"
g_script_version="0.2"
g_script_date="2024-10-07"

g_short_options=""
g_long_options=""
g_positional_arguments=""

function cleanup_vars() {
  unset g_script_name
  unset g_script_dir
  unset g_script_author
  unset g_script_license
  unset g_script_version
  unset g_script_date

  unset g_short_options
  unset g_long_options
  unset g_positional_arguments

  cleanup_script_vars
}

function load_script_tools() {
  # Source script-tools.bash
  if [[ -f "${g_script_dir}/../bash/script-tools.bash" ]]; then
    # shellcheck source=/home/brennan/.dotfiles/bash/script-tools.bash
    source "${g_script_dir}/../bash/script-tools.bash"
  fi
}

function show_version() {
  print_out "Application: ${g_script_name}"
  print_out "Author: ${g_script_author} --- License: ${g_script_license}"
  print_out "Version: ${g_script_version} --- Date: ${g_script_date}"
  print_blank_line
}

function show_help() {
  show_version
  print_help
}

function set_short_options() {
  g_short_options="$1"
}

function set_long_options() {
  g_long_options="$1"
}

function process_arguments() {
  local args
  set +o errexit # temporarily turn off error on exit
  args=$(getopt --name "${g_script_name}" --options "${g_short_options}hv" --longoptions "${g_long_options},help,version" -- "$@")
  # Handle if getopt returned an error
  # shellcheck disable=SC2181
  if [[ $? -gt 0 ]]; then
    show_help
    exit 1
  fi
  set -o errexit # turn error on exit back on

  eval set -- "${args}"

  ## Handle the required options, help & version, bypass everything else
  local flags=("$@")
  local i=0
  while [[ "$i" -lt "${#flags[@]}" ]]; do
    local flag=${flags[i]}
    if [[ "${flag}" == "-h" || "${flag}" == "--help" ]]; then
      show_help
      exit 0
    elif [[ "${flag}" == "-v" || "${flag}" == "--version" ]]; then
      show_version
      exit 0
    elif [[ "${flag}" == "--" ]]; then
      break
    fi
    i=$((i + 1))
  done

  # Split up the flags and positionals
  local flags=() positional_arguments=()
  local reached_positionals=0
  while [[ $# -gt 0 ]]; do
    if [[ "$1" == "--" ]]; then
      reached_positionals=1
      shift
    else
      if [[ "${reached_positionals}" -eq 1 ]]; then
        positional_arguments+=("$1")
        shift
      else
        flags+=("$1")
        shift
      fi
    fi
  done

  process_flags "${flags[@]}"
  g_positional_arguments=("${positional_arguments[@]}")

  # We require at least one positional argument for the sub_command
  validate_number_of_positional_arguments 1 "Invalid number of arguments - missing command."
}

## USAGE: First parameter should be the number of expected (required) positional arguments.
## Optionally, you can pass in a second argument to customize the error message.
function validate_number_of_positional_arguments() {
  local expected_arguments=$1
  local error_msg="${2:-Invalid number of arguments, expected at least ${expected_arguments}.}"

  if [[ "${#g_positional_arguments[@]}" -lt ${expected_arguments} ]]; then
    print_error "${error_msg}"
    show_help
    exit 1
  fi
}

function main_handler() {
  load_script_tools
  setup_options
  process_arguments "$@"
  main "${g_positional_arguments[@]}"
  cleanup_vars
}

### END Script template bootstrap
#################################

# Flags
g_output=""
g_extension="png"
g_style=""
g_font=""
g_layout=""
g_show_image="false"

## USAGE: If you add any global variables, clean them up in this method
function cleanup_script_vars() {
  unset g_output
  unset g_extension
  unset g_style
}

## USAGE: If you need to add any command-line flags or options, do it here.
## You should call one or both of the helper methods set_short_options or
## set_long_options.  They accept a string with syntax that is the same for
## the getopt program.  See it's help for more information.
function setup_options() {
  set_short_options "o:e:s:f:l:S"
  set_long_options "output:,extension:,style:,font:,layout:,show"
}

## Usage: If you added command-line flags or options using setup_options,
## process them here.  The flags and their values will be passed as an array
## directly into this method so you can process them however you wish,
## including using 'shift' as you loop.
function process_flags() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
    '-o' | '--output')
      g_output="$2"
      shift 2
      ;;
    '-e' | '--extension')
      g_extension="$2"
      shift 2
      ;;
    '-s' | '--style')
      g_style="$2"
      shift 2
      ;;
    '-f' | '--font')
      g_font="$2"
      shift 2
      ;;
    '-l' | '--layout')
      g_layout="$2"
      shift 2
      ;;
    '-S' | '--show')
      g_show_image="true"
      shift
      ;;
    '--')
      shift
      break
      ;;
    *)
      throw_error_msg "Unknown option: $1"
      ;;
    esac
  done
}

## USAGE: Construct your help screen text here.
function print_help() {
  print_out "  ${script_name} [options] <sub-command>"
  print_blank_line
  print_out "Script to use a free online service (memegen.link) to generate"
  print_out "meme images from templates."
  print_blank_line
  print_out "Options:"
  print_blank_line
  print_out "  -h or --help"
  print_out "      Show this help screen."
  print_blank_line
  print_out "  -v or --version"
  print_out "     Show the version number."
  print_blank_line
  print_out "  -o or --output"
  print_out "     The output file to produce (default meme.png)"
  print_blank_line
  print_out "  -e or --extension"
  print_out "     The extension (and file format) to produce the image.  The"
  print_out "     extension passed in output will override this value."
  print_blank_line
  print_out "  -s or --style"
  print_out "     Some templates support alternate styles, use this to select"
  print_out "     which one you wish to use."
  print_blank_line
  print_out "  -f or --font"
  print_out "     Change the default font used.  See the website for options."
  print_blank_line
  print_out "  -l or --layout"
  print_out "     Can pass 'top' to change how the text is overlayed.  See the"
  print_out "     website for more details."
  print_blank_line
  print_out "  -S or --show"
  print_out "     Open the image to view it after generating it."
  print_blank_line
  print_out "Sub-Commands:"
  print_blank_line
  print_out "  list"
  print_out "      Show the list of available templates."
  print_blank_line
  print_out "  gen (or 'generate')"
  print_out "      Generate a meme image."
}

checkInternet() {
  curl -A curl -s github.com >/dev/null 2>&1 || {
    echo "Error: no active internet connection" >&2
    return 1
  }
}

function list_memes() {
  curl -sL https://api.memegen.link/templates | jq '.[] | "\(.id) -> \(.name)"'
}

function generate_meme() {
  ## Process positional arguments
  if [[ "${#@}" -lt 2 ]]; then
    print_error "Invalid number of arguments for meme generation, minimum of two."
    show_help
    exit 1
  fi

  local meme top_text bottom_text="" key args
  args=("$@")
  for key in "${!args[@]}"; do
    case "${key}" in
    0)
      meme=$(echo "${args[$key]}" | tr "[:upper:]" "[:lower:]")
      ;;
    1)
      top_text=$(jq -rn --arg x "${args[$key]}" '$x|@uri')
      ;;
    2)
      bottom_text=$(jq -rn --arg x "${args[$key]}" '$x|@uri')
      ;;
    3)
      break
      ;;
    *)
      throw_error_msg "Internal Argument Error (Generate)"
      ;;
    esac
  done

  local outputPath
  local filename
  outputPath=$(dirname -- "${g_output}")
  filename=$(basename -- "${g_output}")
  local extension="${filename##*.}"
  filename="${filename%.*}"

  if [[ "${extension}" == "" ]]; then
    extension="${g_extension}"
  else
    g_extension="${extension}"
  fi

  if [[ "${filename}" == "" ]]; then
    filename="meme"
  fi

  local outputFile="${outputPath}/${filename}.${extension}"

  local params=()
  params+=("--data" "template_id=${meme}" "--data" "text[]=${top_text}")
  if [[ ${bottom_text} != "" ]]; then
    params+=("--data" "text[]=${bottom_text}")
  fi

  params+=("--data" "extension=${g_extension}")

  if [[ ${g_style} != "" ]]; then
    params+=("--data" "style[]=${g_style}")
  fi

  if [[ ${g_font} != "" ]]; then
    params+=("--data" "font=${g_font}")
  fi

  if [[ ${g_layout} != "" ]]; then
    params+=("--data" "layout=${g_layout}")
  fi

  local response url error
  response=$(curl -sL https://api.memegen.link/images "${params[@]}")

  error=$(echo "${response}" | jq -r '.error')
  url=$(echo "${response}" | jq -r '.url')

  if [[ "${error}" != "" && "${error}" != "null" ]]; then
    throw_error_msg "Error generationg image: ${error}"
  fi

  print_info "URL: ${url}"
  print_info "File: ${outputFile}"

  curl -sL --output "${outputFile}" --remote-name "${url}"

  if [[ "${g_show_image}" == "true" ]]; then
    xdg-open "${outputFile}" &>/dev/null
  fi
}

## Your main implementation goes here.  All of the positional arguments have
## been passed as an array to this function.  The first parameter should be
## the command (sub-command) name.
function main() {
  checkInternet

  local sub_command="${1}"
  shift

  case "${sub_command}" in
  list)
    list_memes
    ;;
  gen | generate)
    generate_meme "$@"
    ;;
  *)
    throw_error_msg "Unknown ${g_script_name} command: '${sub_command}'"
    ;;
  esac
}

## This must be the last line
main_handler "$@"
