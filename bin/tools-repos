#!/usr/bin/env bash
#

### START Bash strict mode
# shellcheck disable=SC2154
([[ -n ${ZSH_EVAL_CONTEXT} && ${ZSH_EVAL_CONTEXT} =~ :file$ ]] ||
  [[ -n ${BASH_VERSION} ]] && (return 0 2>/dev/null)) && SOURCED=true || SOURCED=false
if ! ${SOURCED}; then
  set -o errexit  # same as set -e
  set -o nounset  # same as set -u
  set -o errtrace # same as set -E
  set -o pipefail
  set -o posix
  #set -o xtrace # same as set -x, turn on for debugging

  shopt -s extdebug
  IFS=$(printf '\n\t')
fi
### END Bash strict mode

### START Script template bootstrap

g_script_name=$(basename "${BASH_SOURCE[0]}")
g_script_dir="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"

g_short_options=""
g_long_options=""
g_positional_arguments=""

function cleanup_vars() {
  unset g_script_name
  unset g_script_dir
  unset g_script_author
  unset g_script_license
  unset g_script_version
  unset g_script_date

  unset g_short_options
  unset g_long_options
  unset g_positional_arguments

  cleanup_script_vars
}

function load_script_tools() {
  # Source script-tools.bash
  if [[ -f "${g_script_dir}/../bash/script-tools.bash" ]]; then
    # shellcheck source=/home/brennan/.dotfiles/bash/script-tools.bash
    source "${g_script_dir}/../bash/script-tools.bash"
  fi
}

function show_version() {
  print_out "Application: ${g_script_name}"
  print_out "Author: ${g_script_author} --- License: ${g_script_license}"
  print_out "Version: ${g_script_version} --- Date: ${g_script_date}"
  print_blank_line
}

function show_help() {
  show_version
  print_help
}

function set_short_options() {
  g_short_options="$1"
}

function set_long_options() {
  g_long_options="$1"
}

function process_arguments() {
  local args
  set +o errexit # temporarily turn off error on exit
  args=$(getopt --name "${g_script_name}" --options "${g_short_options}hv" --longoptions "${g_long_options},help,version" -- "$@")
  # Handle if getopt returned an error
  # shellcheck disable=SC2181
  if [[ $? -gt 0 ]]; then
    show_help
    exit 1
  fi
  set -o errexit # turn error on exit back on

  eval set -- "${args}"

  ## Handle the required options, help & version, bypass everything else
  local flags=("$@")
  local i=0
  while [[ "$i" -lt "${#flags[@]}" ]]; do
    local flag=${flags[i]}
    if [[ "${flag}" == "-h" || "${flag}" == "--help" ]]; then
      show_help
      exit 0
    elif [[ "${flag}" == "-v" || "${flag}" == "--version" ]]; then
      show_version
      exit 0
    elif [[ "${flag}" == "--" ]]; then
      break
    fi
    i=$((i + 1))
  done

  # Split up the flags and positionals
  local flags=() positional_arguments=()
  local reached_positionals=0
  while [[ $# -gt 0 ]]; do
    if [[ "$1" == "--" ]]; then
      reached_positionals=1
      shift
    else
      if [[ "${reached_positionals}" -eq 1 ]]; then
        positional_arguments+=("$1")
        shift
      else
        flags+=("$1")
        shift
      fi
    fi
  done

  process_flags "${flags[@]}"
  g_positional_arguments=("${positional_arguments[@]}")
}

## USAGE: First parameter should be the number of expected (required) positional arguments.
## Optionally, you can pass in a second argument to customize the error message.
function validate_number_of_positional_arguments() {
  local expected_arguments=$1
  local error_msg="${2:-Invalid number of arguments, expected at least ${expected_arguments}.}"

  if [[ "${#g_positional_arguments[@]}" -lt ${expected_arguments} ]]; then
    print_error "${error_msg}"
    show_help
    exit 1
  fi
}

function main_handler() {
  load_script_tools
  setup_script_vars
  setup_options
  process_arguments "$@"
  main "${g_positional_arguments[@]}"
  cleanup_vars
}

g_script_author="Brennan Fee"
g_script_license="MIT License"
g_script_version="0.1"
g_script_date="2024-11-26"

### END Script template bootstrap
#################################

## USAGE: If you want any global variables, set them up here
function setup_script_vars() {
  g_include_dev_tools="false"
}

## USAGE: If you add any global variables, clean them up in this method
function cleanup_script_vars() {
  unset g_include_dev_tools
}

## USAGE: If you need to add any command-line flags or options, do it here.
## You should call one or both of the helper methods set_short_options or
## set_long_options.  They accept a string with syntax that is the same for
## the getopt program.  See it's help for more information.
function setup_options() {
  set_short_options "d"
  set_long_options "include-dev"
}

## Usage: If you added command-line flags or options using setup_options,
## process them here.  The flags and their values will be passed as an array
## directly into this method so you can process them however you wish,
## including using 'shift' as you loop.
function process_flags() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
    '-d' | '--include-dev')
      g_include_dev_tools="true"
      shift
      ;;
    '--')
      shift
      break
      ;;
    *)
      throw_error_msg "Unknown option: $1"
      ;;
    esac
  done
}

## USAGE: Construct your help screen text here.
function print_help() {
  print_out "  ${g_script_name} [options]"
  print_blank_line
  print_out "This script sets up a few key Debian third-party repositories the"
  print_out "'proper' way (using a signing key)."
  print_blank_line
  print_out "Options:"
  print_blank_line
  print_out "  -h or --help"
  print_out "      Show this help screen."
  print_blank_line
  print_out "  -v or --version"
  print_out "     Show the version number."
  print_blank_line
  print_out "  -d or --include-dev"
  print_out "     Also install the tools for a development environment."
  print_blank_line
}

function prepare() {
  sudo mkdir -p /etc/apt/keyrings

  if ! command_exists curl || ! command_exists gpg; then
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q install \
      ca-certificates curl gnupg
  fi
}

function install_mullvad_repo() {
  local listFile="/etc/apt/sources.list.d/mullvad.list"
  local keyFile="/etc/apt/keyrings/mullvad-keyring.asc"
  local keyUrl="https://repository.mullvad.net/deb/mullvad-keyring.asc"
  local repoUrl="https://repository.mullvad.net/deb/stable"

  if [[ ! -f "${listFile}" ]]; then
    print_out "  Installing Mullvad repo"
    # key file
    sudo curl -fsSLo "${keyFile}" "${keyUrl}"
    # list file
    echo "deb [signed-by=${keyFile} arch=$(dpkg --print-architecture)] ${repoUrl} $(lsb_release -cs) main" | sudo tee "${listFile}" >/dev/null
  fi
}

function install_netbird_repo() {
  local listFile="/etc/apt/sources.list.d/netbird.list"
  local keyFile="/etc/apt/keyrings/netbird-archive-keyring.gpg"
  local keyUrl="https://pkgs.netbird.io/debian/public.key"
  local repoUrl="https://pkgs.netbird.io/debian"

  if [[ ! -f "${listFile}" ]]; then
    print_out "  Installing Netbird repo"
    # key file
    curl -fsSL "${keyUrl}" | sudo gpg --dearmor -o "${keyFile}"
    # list file
    echo "deb [signed-by=${keyFile} arch=$(dpkg --print-architecture)] ${repoUrl} stable main" | sudo tee "${listFile}" >/dev/null
  fi
}

function install_beyondCompare_repo() {
  local listFile="/etc/apt/sources.list.d/scootersoftware.list"
  local keyFile="/etc/apt/keyrings/scootersoftware.asc"
  local keyUrl="https://www.scootersoftware.com/DEB-GPG-KEY-scootersoftware.asc"
  local repoUrl="https://repository.mullvad.net/deb/stable"

  if [[ ! -f "${listFile}" ]]; then
    print_out "  Installing Beyond Compare repo"
    # Prevent installs from trying to install this repo again
    sudo touch /etc/default/bcompare
    # key file
    sudo curl -fsSLo "${keyFile}" "${keyUrl}"
    # list file
    echo "deb [signed-by=${keyFile} arch=$(dpkg --print-architecture)] ${repoUrl} bcompare5 non-free" | sudo tee "${listFile}" >/dev/null
  fi
}

function install_insync_repo() {
  local listFile="/etc/apt/sources.list.d/scootersoftware.list"
  local keyFile="/etc/apt/keyrings/insync.gpg"

  if [[ ! -f "${listFile}" ]]; then
    print_out "  Installing Insync repo"
    # key file
    sudo gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys ACCAF35C
    sudo gpg --export ACCAF35C | sudo tee "${keyFile}" >/dev/null
    sudo gpg --batch --yes --delete-keys ACCAF35C
    # list file
    echo "deb [signed-by=${keyFile} arch=$(dpkg --print-architecture)] http://apt.insync.io/$(lsb_release -is | tr "[:upper:]" "[:lower:]") $(lsb_release -cs) non-free contrib" | sudo tee "${listFile}"
  fi
}

function install_vsCode_repo() {
  local listFile="/etc/apt/sources.list.d/vscode.list"
  local keyFile="/etc/apt/keyrings/microsoft.asc"
  local keyUrl="https://packages.microsoft.com/keys/microsoft.asc"
  local repoUrl="https://packages.microsoft.com/repos/code"

  if [[ ! -f "${listFile}" ]]; then
    print_out "  Installing VS Code repo"
    # Prevent installs from trying to install this repo again
    echo "code code/add-microsoft-repo boolean false" | sudo debconf-set-selections
    # key file
    sudo curl -fsSLo "${keyFile}" "${keyUrl}"
    # list file
    echo "deb [signed-by=${keyFile} arch=$(dpkg --print-architecture)] ${repoUrl} stable main" | sudo tee "${listFile}" >/dev/null
  fi
}

function install_chrome_repo() {
  local listFile="/etc/apt/sources.list.d/google-chrome.list"
  local keyFile="/etc/apt/keyrings/google.asc"
  local keyUrl="https://dl.google.com/linux/linux_signing_key.pub"
  local repoUrl="https://dl.google.com/linux/chrome/deb"

  if [[ ! -f "${listFile}" ]]; then
    print_out "  Installing Google Chrome repo"
    # key file
    sudo curl -fsSLo "${keyFile}" "${keyUrl}"
    # list file
    echo "deb [signed-by=${keyFile} arch=$(dpkg --print-architecture)] ${repoUrl} stable main" | sudo tee "${listFile}" >/dev/null
  fi
}

function install_common_repos() {
  install_mullvad_repo
  install_netbird_repo
  install_beyondCompare_repo
  install_insync_repo
  # install_vsCode_repo # deprecated, use Flatpak instead
  # install_chrome_repo # deprecated, use Flatpak instead
}

function install_dev_repos() {
  if [[ ! "${g_include_dev_tools}" == "true" ]]; then
    return
  fi
}

function install_common_tools() {
  DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q install \
    mullvad-vpn netbird bcompare insync
  ##mullvad-vpn bcompare insync code google-chrome-stable

  # Are we running on a desktop (with a GUI installed)?
  if [[ -n "$XDG_CURRENT_DESKTOP" ]]; then
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q install netbird-ui

    ## Insync file manager integrations
    if command_exists dolphin; then
      DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q install insync-dolphin
    fi

    if command_exists caja; then
      DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q install insync-caja
    fi

    if command_exists nautilus; then
      DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q install insync-nautilus
    fi

    if command_exists thunar; then
      DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q install insync-nautilus
    fi
  fi
}

function install_dev_tools() {
  if [[ ! "${g_include_dev_tools}" == "true" ]]; then
    return
  fi
}

## Your main implementation goes here.  All of the positional arguments have
## been passed as an array to this function.
function main() {
  prepare

  install_common_repos
  install_dev_repos

  DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q update

  install_common_tools
  install_dev_tools
}

## This must be the last line
main_handler "$@"
