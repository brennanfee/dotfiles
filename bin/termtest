#!/usr/bin/env bash

### START Bash strict mode
# shellcheck disable=SC2154
([[ -n ${ZSH_EVAL_CONTEXT} && ${ZSH_EVAL_CONTEXT} =~ :file$ ]] ||
  [[ -n ${BASH_VERSION} ]] && (return 0 2>/dev/null)) && SOURCED=true || SOURCED=false
if ! ${SOURCED}; then
  set -o errexit  # same as set -e
  set -o nounset  # same as set -u
  set -o errtrace # same as set -E
  set -o pipefail
  set -o posix
  #set -o xtrace # same as set -x, turn on for debugging

  shopt -s extdebug
  IFS=$(printf '\n\t')
fi
### END Bash strict mode

### START Script template bootstrap

g_script_name=$(basename "${BASH_SOURCE[0]}")
g_script_dir="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
g_script_author="Brennan Fee"
g_script_license="MIT License"
g_script_version="0.3"
g_script_date="2024-10-07"

g_short_options=""
g_long_options=""
g_positional_arguments=""

function cleanup_vars() {
  unset g_script_name
  unset g_script_dir
  unset g_script_author
  unset g_script_license
  unset g_script_version
  unset g_script_date

  unset g_short_options
  unset g_long_options
  unset g_positional_arguments

  cleanup_script_vars
}

function load_script_tools() {
  # Source script-tools.bash
  if [[ -f "${g_script_dir}/../bash/script-tools.bash" ]]; then
    # shellcheck source=/home/brennan/.dotfiles/bash/script-tools.bash
    source "${g_script_dir}/../bash/script-tools.bash"
  fi
}

function show_version() {
  print_out "Application: ${g_script_name}"
  print_out "Author: ${g_script_author} --- License: ${g_script_license}"
  print_out "Version: ${g_script_version} --- Date: ${g_script_date}"
  print_blank_line
}

function show_help() {
  show_version
  print_help
}

function set_short_options() {
  g_short_options="$1"
}

function set_long_options() {
  g_long_options="$1"
}

function process_arguments() {
  local args
  set +o errexit # temporarily turn off error on exit
  args=$(getopt --name "${g_script_name}" --options "${g_short_options}hv" --longoptions "${g_long_options},help,version" -- "$@")
  # Handle if getopt returned an error
  # shellcheck disable=SC2181
  if [[ $? -gt 0 ]]; then
    show_help
    exit 1
  fi
  set -o errexit # turn error on exit back on

  eval set -- "${args}"

  ## Handle the required options, help & version, bypass everything else
  local flags=("$@")
  local i=0
  while [[ "$i" -lt "${#flags[@]}" ]]; do
    local flag=${flags[i]}
    if [[ "${flag}" == "-h" || "${flag}" == "--help" ]]; then
      show_help
      exit 0
    elif [[ "${flag}" == "-v" || "${flag}" == "--version" ]]; then
      show_version
      exit 0
    elif [[ "${flag}" == "--" ]]; then
      break
    fi
    i=$((i + 1))
  done

  # Split up the flags and positionals
  local flags=() positional_arguments=()
  local reached_positionals=0
  while [[ $# -gt 0 ]]; do
    if [[ "$1" == "--" ]]; then
      reached_positionals=1
      shift
    else
      if [[ "${reached_positionals}" -eq 1 ]]; then
        positional_arguments+=("$1")
        shift
      else
        flags+=("$1")
        shift
      fi
    fi
  done

  # We require at least one positional argument for the sub_command
  if [[ "${#positional_arguments[@]}" -eq 0 ]]; then
    print_error "Invalid number of arguments - missing command."
    show_help
    exit 1
  fi

  process_flags "${flags[@]}"
  g_positional_arguments=("${positional_arguments[@]}")
}

function main_handler() {
  load_script_tools
  setup_options
  process_arguments "$@"
  main "${g_positional_arguments[@]}"
  cleanup_vars
}

### END Script template bootstrap
#################################

## USAGE: If you add any global variables, clean them up in this method
function cleanup_script_vars() {
  # unset abc

  noop
}

## USAGE: If you need to add any command-line flags or options, do it here.
## You should call one or both of the helper methods set_short_options or
## set_long_options.  They accept a string with syntax that is the same for
## the getopt program.  See it's help for more information.
function setup_options() {
  # set_short_options "abc:"
  # set_long_options "beta,charlie:"

  noop
}

## Usage: If you added command-line flags or options using setup_options,
## process them here.  The flags and their values will be passed as an array
## directly into this method so you can process them however you wish,
## including using 'shift' as you loop.
function process_flags() {
  # while [[ $# -gt 0 ]]; do
  #   case "$1" in
  #   '-a')
  #     alpha=1 # or "yes"
  #     shift
  #     ;;
  #   '-c' | '--charlie')
  #     charlie="$2"
  #     shift 2
  #     ;;
  #   '--')
  #     shift
  #     break
  #     ;;
  #   *)
  #     throw_error_msg "Unknown option: $1"
  #     ;;
  #   esac
  # done

  noop
}

## USAGE: Construct your help screen text here.
function print_help() {
  to_be_developed
}

## Your main implementation goes here.  All of the positional arguments have
## been passed as an array to this function.
function main() {
  echo -e "\033[0mNormal\033[0m  \033[0;33mNormal Yellow\033[0m"
  echo -e "\033[1mBold\033[0m    \033[1;33mBold Yellow\033[0m"
  echo -e "\033[2mDark\033[0m    \033[2;33mDark Yellow\033[0m"
  echo -e "\033[0;97mHigh Intensity\033[0m    \033[0;93mHigh Intensity Yellow\033[0m"
  echo -e "\033[1;97mHigh Intensity Bold\033[0m   \033[1;93mHigh Intensity Bold Yellow\033[0m"
  echo -e "\033[2;97mHigh Intensity Dark\033[0m    \033[2;93mHigh Intensity Dark Yellow\033[0m"
  echo -e "\033[3mItalic\033[0m"
  echo -e "\033[3;1mBold Italic\033[0m    \033[1;3mBold Italic Alt\033[0m"
  echo -e "\033[3;2mDark Italic\033[0m"
  echo -e "\033[3;97mHigh Intensity Italic\033[0m    \033[3;93mHigh Intensity Yellow Italic\033[0m"
  echo -e "\033[9mStrikethrough\033[0m"
  echo -e "\033[8mConceal\033[0m"
  echo -e "\033[7mReverse\033[0m"
  echo ""
  echo -e "\033[53mOverline\033[0m   \033[4mUnderline\033[0m"
  echo -e "\033[4:2mDouble Underline\033[0m"
  echo -e "\033[4:4mDotted Underline\033[0m   \033[4:5mDashed Underline\033[0m"
  echo -e "\033[4:3mUndercurl\033[0m"
  echo -e "\033[4:3m\033[58;5;6mUndercurl Cyan\033[0m"
  echo ""
  echo "Ligatures: == === !== >= <= =>"
  echo "Font icons:  契            勒  鈴  "
  echo "Color emojis:  😄  💜  🎵  💾  💩  ⛔"
}

## This must be the last line
main_handler "$@"
