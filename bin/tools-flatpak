#!/usr/bin/env bash
#
# Page to look for apps to install: https://flathub.org

### START Bash strict mode
# shellcheck disable=SC2154
([[ -n ${ZSH_EVAL_CONTEXT} && ${ZSH_EVAL_CONTEXT} =~ :file$ ]] ||
  [[ -n ${BASH_VERSION} ]] && (return 0 2>/dev/null)) && SOURCED=true || SOURCED=false
if ! ${SOURCED}; then
  set -o errexit  # same as set -e
  set -o nounset  # same as set -u
  set -o errtrace # same as set -E
  set -o pipefail
  set -o posix
  #set -o xtrace # same as set -x, turn on for debugging

  shopt -s extdebug
  IFS=$(printf '\n\t')
fi
### END Bash strict mode

### START Script template bootstrap

script_name=$(basename "${BASH_SOURCE[0]}")
script_dir="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
script_author="Brennan Fee"
script_license="MIT License"
script_version="0.3"
script_date="2024-09-16"

function cleanup_vars() {
  unset script_name
  unset script_dir
  unset script_author
  unset script_license
  unset script_version
  unset script_date

  cleanup_script_vars
}

# Source script-tools.bash
if [[ -f "${script_dir}/../bash/script-tools.bash" ]]; then
  # shellcheck source=/home/brennan/.dotfiles/bash/script-tools.bash
  source "${script_dir}/../bash/script-tools.bash"
fi

function show_version() {
  print_status "${script_name}"
  print_status "Author: ${script_author} --- License: ${script_license}"
  print_status "Version: ${script_version} --- Date: ${script_date}"
  print_blank_line

  if [[ "${1:-}" == "exit" || "${1:-}" == "yes" ]]; then
    exit 0
  fi
}

### END Script template bootstrap

## Defaults
include_dev_tools="false"
desktop_environment="kde"

function cleanup_script_vars() {
  unset include_dev_tools
  unset desktop_environment
}

function process_arguments() {
  local args
  args=$(getopt --name "${script_name}" --options de:hv --longoptions "include-dev,desktop-environment:,help,version" -- "$@")

  eval set -- "${args}"

  # Show help if no parameters were passed
  #
  # shellcheck disable=SC2181
  # if [[ $? -ne 0 ]]; then
  #   show_help
  # fi

  # Process flags and options
  #
  while true; do
    case "$1" in
    '-h' | '--help')
      show_help
      ;;
    '-v' | '--version')
      show_version "exit"
      ;;
    '-d' | '--include-dev')
      include_dev_tools="true"
      shift
      continue
      ;;
    '-e' | '--desktop-environment')
      desktop_environment=$(echo "$2" | tr "[:upper:]" "[:lower:]")
      shift 2
      continue
      ;;
    '--')
      shift
      break
      ;;
    *)
      throw_error_msg "Unknown option: $1"
      ;;
    esac
  done

  # Process positional arguments
  #
  # local arg_count=1
  # for arg; do
  #   case "${arg_count}" in
  #   1)
  #     # VAR=${arg}
  #     ;;
  #   2)
  #     # OTHER=$(echo "${arg}" | tr "[:upper:]" "[:lower:]")
  #     ;;
  #   3)
  #     break
  #     ;;
  #   *)
  #     throw_error_msg "Internal Argument Error"
  #     ;;
  #   esac
  #   arg_count=$((arg_count + 1))
  # done
}

#### START: Help

function show_help() {
  show_version ""

  print_status "  ${script_name} [options]"
  print_blank_line
  print_status "This program sets up Flatpak and installs my desired applications/tools."
  print_blank_line
  print_status "Options:"
  print_blank_line
  print_status "  -h or --help"
  print_status "      Show this help screen."
  print_blank_line
  print_status "  -v or --version"
  print_status "     Show the version number."
  print_blank_line
  print_status "  -d or --include-dev"
  print_status "     Also install the tools for a development environment."
  print_blank_line

  exit 0
}

#### END: Help

function check_prerequisites() {
  # Check for flatpak itself, if needed install it
  if ! command -v flatpak &>/dev/null; then
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q update
    DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q install \
      flatpak flatpak-xdg-utils xdg-desktop-portal

    case "${desktop_environment}" in
    "kde")
      DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q install \
        xdg-desktop-portal-kde plasma-discover-backend-flatpak \
        qt5-xdgdesktopportal-platformtheme qt6-xdgdesktopportal-platformtheme
      ;;
    "gnome")
      DEBIAN_FRONTEND=noninteractive sudo apt-get -y -q install \
        xdg-desktop-portal-gnome gnome-software-plugin-flatpak
      ;;
    *)
      print_warning "Unknown desktop environment requested."
      ;;
    esac
  fi

  # Setup flathub repo
  sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
}

function install_if_needed() {
  if [[ $(flatpak list --columns=application | grep -i -c "${1}") -eq 0 ]]; then
    sudo flatpak install -y --noninteractive flathub "${1}"
  fi
}

function install_common_tools() {
  install_if_needed com.github.tchx84.Flatseal
  install_if_needed com.bitwarden.desktop
  install_if_needed com.jgraph.drawio.desktop
  install_if_needed com.plexamp.Plexamp
  install_if_needed org.libreoffice.LibreOffice
  install_if_needed org.mozilla.firefox
  install_if_needed org.signal.Signal
  install_if_needed org.speedcrunch.SpeedCrunch
  install_if_needed org.videolan.VLC
  install_if_needed org.wezfurlong.wezterm
  install_if_needed tv.plex.PlexDesktop
  install_if_needed tv.plex.PlexHTPC
  install_if_needed org.kde.okular
  install_if_needed org.bleachbit.BleachBit
  install_if_needed com.rafaelmardojai.Blanket
  install_if_needed com.github.tenderowl.frog
  install_if_needed org.localsend.localsend_app
}

function install_dev_tools() {
  noop
}

function main() {
  check_prerequisites

  install_common_tools

  if [[ "${include_dev_tools}" == "true" ]]; then
    install_dev_tools
  fi

  # Upgrade all installed
  flatpak upgrade -y --noninteractive --system
  flatpak upgrade -y --noninteractive --user
}

### START Script main handler

function main_handler() {
  local args=("$@")
  process_arguments "$@"

  main "${args[@]}"
  cleanup_vars
}

main_handler "$@"

### END Script main handler
