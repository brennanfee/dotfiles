#!/usr/bin/env bash

### START Bash strict mode
# shellcheck disable=SC2154
([[ -n ${ZSH_EVAL_CONTEXT} && ${ZSH_EVAL_CONTEXT} =~ :file$ ]] ||
  [[ -n ${BASH_VERSION} ]] && (return 0 2>/dev/null)) && SOURCED=true || SOURCED=false
if ! ${SOURCED}; then
  set -o errexit  # same as set -e
  set -o nounset  # same as set -u
  set -o errtrace # same as set -E
  set -o pipefail
  set -o posix
  #set -o xtrace # same as set -x, turn on for debugging

  shopt -s extdebug
  IFS=$(printf '\n\t')
fi
### END Bash strict mode

### START Script template bootstrap

script_name=$(basename "${BASH_SOURCE[0]}")
script_dir="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
script_author="Brennan Fee"
script_license="MIT License"
script_version="0.7"
script_date="2024-09-16"

function cleanup_vars() {
  unset script_name
  unset script_dir
  unset script_author
  unset script_license
  unset script_version
  unset script_date

  cleanup_script_vars
}

# Source script-tools.bash
if [[ -f "${script_dir}/../bash/script-tools.bash" ]]; then
  # shellcheck source=/home/brennan/.dotfiles/bash/script-tools.bash
  source "${script_dir}/../bash/script-tools.bash"
fi

function show_version() {
  print_status "${script_name}"
  print_status "Author: ${script_author} --- License: ${script_license}"
  print_status "Version: ${script_version} --- Date: ${script_date}"
  print_blank_line

  if [[ "${1:-}" == "exit" || "${1:-}" == "yes" ]]; then
    exit 0
  fi
}

### END Script template bootstrap

## Defaults
FORCE="false"
SERVER="moose.bfee.casa"
LOCATION=""
SHARE_TO_MOUNT=""

# The last two are considered "hidden" options as they are not listed in the help
SUPPORTED_SHARES=("files" "backups" "volumes" "metadata" "files-ro" "other" "root")

function cleanup_script_vars() {
  unset FORCE
  unset SERVER
  unset LOCATION
  unset SHARE_TO_MOUNT
  unset SUPPORT_SHARES
}

function process_arguments() {
  local args
  args=$(getopt --name "${script_name}" --options fs:l::hv --longoptions "force,server:,location:,help,version" -- "$@")

  # Show help if no parameters were passed
  #
  # shellcheck disable=SC2181
  if [[ $? -ne 0 ]]; then
    show_help
  fi

  eval set -- "${args}"

  # Process flags and options
  #
  while true; do
    case "$1" in
    '-h' | '--help')
      show_help
      ;;
    '-v' | '--version')
      show_version "exit"
      ;;
    '-f' | '--force')
      FORCE="true"
      shift
      continue
      ;;
    '-s' | '--server')
      SERVER=$(echo "${2}" | tr "[:upper:]" "[:lower:]")
      shift 2
      continue
      ;;
    '-l' | '--location')
      LOCATION=$2
      shift 2
      continue
      ;;
    '--')
      shift
      break
      ;;
    *)
      throw_error_msg "Unknown option: $1"
      ;;
    esac
  done

  # Process positional arguments
  #
  local arg_count=1
  for arg; do
    case "${arg_count}" in
    1)
      # Normalize to lower case
      SHARE_TO_MOUNT=$(echo "${arg}" | tr "[:upper:]" "[:lower:]")
      ;;
    2)
      break
      ;;
    *)
      throw_error_msg "Internal Argument Error"
      ;;
    esac
    arg_count=$((arg_count + 1))
  done
}

#### START: Help

function show_help() {
  show_version

  print_status "Little utility to mount my MooseFS volumes just the way I like."
  print_blank_line
  print_status "  ${script_name} [options] <share name>"
  print_blank_line
  print_status "Options:"
  print_blank_line
  print_status "  -h or --help"
  print_status "    Show this help screen."
  print_blank_line
  print_status "  -f or --force"
  print_status "    Force mount (rarely needed)."
  print_blank_line
  print_status "  -s or --server"
  print_status "    Override for the moosefs server location (fqdn)."
  print_blank_line
  print_status "  -l or --location"
  print_status "    Override for the mount location, each share has it's own"
  print_status "    default location if no override is provided."
  print_blank_line
  print_status "  <share name>"
  print_status "     Which share to mount, options are: files, backups, volumes,"
  print_status "     metadata, and files-ro."
  print_blank_line

  exit 0
}

#### END: Help

function verify_share_to_mount() {
  get_exit_code contains_element "${SHARE_TO_MOUNT}" "${SUPPORTED_SHARES[@]}"
  if [[ ! ${EXIT_CODE} == "0" ]]; then
    throw_error_msg "Invalid share option, please use a valid share.  Check the help for a list of valid options."
  fi
}

function verify_prereqs() {
  if ! command -v "mfsmount" >/dev/null; then
    print_warning "WARNING! moosefs is not installed, skipping mounting volumes."
    return 1
  fi

  if [[ "${SHARE_TO_MOUNT}" != "files-ro" ]]; then
    if ! command -v "kwalletcli" >/dev/null; then
      print_warning "WARNING! kwalletcli not installed or on path.  Install it first!"
      return 1
    fi
  fi

  return 0
}

function mount_the_share() {
  # $1 = default location
  # $2 = remote_folder

  local location="${1}"
  if [[ "${LOCATION}" != "" ]]; then
    location="${LOCATION}"
  fi
  local remote_folder="${2}"
  local pword

  pword=$(kwalletcli -f moosefs -e "${SHARE_TO_MOUNT}" 2>/dev/null)
  if [[ -z "${pword}" ]]; then
    throw_error_msg "ERROR! The moosefs wallet entry has not been set up correctly. No password provided."
  fi

  mkdir -p "${location}"

  if mountpoint -q "${location}"; then
    # Already mounted
    if [[ "${FORCE}" == "true" ]]; then
      umount -q -f "${location}"
      mfsmount "${location}" -H "${SERVER}" -S "${remote_folder}" -o rw \
        -o mfspassword="${pword}" -o mfsdelayedinit
    fi
  else
    mfsmount "${location}" -H "${SERVER}" -S "${remote_folder}" -o rw \
      -o mfspassword="${pword}" -o mfsdelayedinit
  fi
}

function mount_ro_share_no_password() {
  # $1 = default location
  # $2 = remote_folder

  local location="${1}"
  if [[ "${LOCATION}" != "" ]]; then
    location="${LOCATION}"
  fi
  local remote_folder="${2}"

  mkdir -p "${location}"

  if mountpoint -q "${location}"; then
    # Already mounted
    if [[ "${FORCE}" == "true" ]]; then
      umount -q -f "${location}"
      mfsmount "${location}" -H "${SERVER}" -S "${remote_folder}" -o ro -o mfsdelayedinit
    fi
  else
    mfsmount "${location}" -H "${SERVER}" -S "${remote_folder}" -o ro -o mfsdelayedinit
  fi
}

function mount_root() {
  local location="${1}"
  if [[ "${LOCATION}" != "" ]]; then
    location="${LOCATION}"
  fi
  local pword

  pword=$(kwalletcli -f moosefs -e "${SHARE_TO_MOUNT}" 2>/dev/null)
  if [[ -z "${pword}" ]]; then
    throw_error_msg "ERROR! The moosefs wallet entry has not been set up correctly. No password provided."
  fi

  mkdir -p "${location}"

  if mountpoint -q "${location}"; then
    # Already mounted
    if [[ "${FORCE}" == "true" ]]; then
      umount -q -f "${location}"
      mfsmount "${location}" -H "${SERVER}" -o rw -o mfspassword="${pword}" -o mfsdelayedinit
    fi
  else
    mfsmount "${location}" -H "${SERVER}" -o rw -o mfspassword="${pword}" -o mfsdelayedinit
  fi
}

function main() {
  if ! verify_prereqs; then
    return 0
  fi

  verify_share_to_mount

  mkdir -p "${HOME}/mounts"

  case "${SHARE_TO_MOUNT}" in
  files)
    mount_the_share "${HOME}/mounts/files" "/files"
    ;;
  volumes)
    mount_the_share "${HOME}/mounts/volumes" "/volumes"
    ;;
  backups)
    mount_the_share "${HOME}/mounts/backups" "/backups"
    ;;
  other)
    mount_the_share "${HOME}/mounts/other" "/other"
    ;;
  files-ro)
    mount_ro_share_no_password "${HOME}/mounts/files-ro" "/files"
    ;;
  metadata)
    mount_the_share "${HOME}/mounts/moose-meta" "."
    ;;
  root)
    mount_root "${HOME}/mounts/moose-root"
    ;;
  *)
    throw_error_msg "Invalid share option detected '${SHARE_TO_MOUNT}', please use a valid share option."
    ;;
  esac
}

### START Script main handler

function main_handler() {
  local args=("$@")
  process_arguments "$@"

  main "${args[@]}"
  cleanup_vars
}

main_handler "$@"

### END Script main handler
