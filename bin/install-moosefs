#!/usr/bin/env bash
# Author: Brennan Fee
# License: MIT License
#
# This script installs Moosefs in one of four roles.  As a client, as a master server, or as a metalogger server, or as a chunkserver.  Please note this merely installs the repository and the necessary APT packages, it does not configure MooseFS as part of the install.

# Bash strict mode
# shellcheck disable=SC2154
([[ -n ${ZSH_EVAL_CONTEXT} && ${ZSH_EVAL_CONTEXT} =~ :file$ ]] ||
 [[ -n ${BASH_VERSION} ]] && (return 0 2>/dev/null)) && SOURCED=true || SOURCED=false
if ! ${SOURCED}; then
  set -o errexit # same as set -e
  set -o nounset # same as set -u
  set -o errtrace # same as set -E
  set -o pipefail
  set -o posix
  #set -o xtrace # same as set -x, turn on for debugging

  shopt -s extdebug
  IFS=$(printf '\n\t')
fi
# END Bash scrict mode

VERSION="0.1 2022-02-03"

# Must be root
USER_ID=$(id -u)
if [[ "${USER_ID}" -ne 0 ]]; then
  echo "This script must be run as root."
  exit 1
fi

### System info & variables
DPKG_ARCH=$(dpkg --print-architecture)
DISTRIBUTION=$(lsb_release -i -s | tr "[:upper:]" "[:lower:]")
EDITION_CODENAME=$(lsb_release -c -s | tr "[:upper:]" "[:lower:]")

SUPPORTED_ROLES=('client' 'master' 'metalogger' 'chunkserver')

### Helper functions
contains_element() {
  #check if an element exist in a string
  for e in "${@:2}"; do [[ ${e} == "$1" ]] && break; done
}

RESET=$(tput sgr0)

print_info() {
  local T_COLS
  T_COLS=$(tput cols)
  echo -e "$1" | fold -sw $((T_COLS - 1))
}

blank_line() {
  echo ""
}

error_msg() {
  local RED
  local T_COLS
  RED=$(tput setaf 1)
  T_COLS=$(tput cols)
  echo -e "${RED}$1${RESET}\n" | fold -sw $((T_COLS - 1))
  exit 1
}

### Help
show_help() {
  print_info "MooseFS installer, version ${VERSION}"
  blank_line
  print_info "This will install the binaries needed for MooseFS to perform one of three roles: A client, the master server, or a metalogger server.  Both the master and metalogger roles also install the client binaries."
  blank_line
  print_info "Options: "
  blank_line
  print_info "    'install_moosefs.bash -?'  Show this help"
  print_info "    'install_moosefs.bash <role name>'  The role to install, options are:"
  print_info "        client, master, metalogger, chunkserver"
  blank_line
  exit 0
}

### Parse and handle input
COMMAND_INPUT=${1:-}
if [[ -z ${COMMAND_INPUT} ]]; then
  show_help
elif [[ ${COMMAND_INPUT} = "-?" ]]; then
  show_help
fi

# Verify the role, error if not valid
MOOSE_ROLE=$(echo "${COMMAND_INPUT}" | tr "[:upper:]" "[:lower:]")
if ! contains_element "${MOOSE_ROLE}" "${SUPPORTED_ROLES[@]}"; then
  error_msg "Invalid role selected '${MOOSE_ROLE}', please input a valid role: Client, Master, Mettalogger, or Chunkserver."
fi

# Make sure the keyring folder exists
mkdir -p /usr/local/share/keyrings

# The key
KEY_FILE="/usr/local/share/keyrings/moosefs-archive-keyring.gpg"
if [[ ! -f ${KEY_FILE} ]]; then
  wget -O- https://ppa.moosefs.com/moosefs.key | gpg --dearmor | tee ${KEY_FILE}
fi

# This is a hack for the Debian testing edition
RELEASE=$(lsb_release -r -s)
if [[ ${RELEASE} == "testing" ]]; then
  # Moosefs does not create repo's for testing, only stable
  EDITION_CODENAME=bullseye
fi

# This is a hack for Ubuntu editions, they only support LTS editions
if [[ ${DISTRIBUTION} == "ubuntu" ]]; then
  if [[ ${EDITION_CODENAME} == "hirsute" || ${EDITION_CODENAME} == "impish" || ${EDITION_CODENAME} == "groovy" ]]; then
    EDITION_CODENAME=focal
  fi
fi

# The repo
REPO_FILE="/etc/apt/sources.list.d/moosefs.list"
if [[ ! -f ${REPO_FILE} ]]; then
  echo "deb [arch=${DPKG_ARCH} signed-by=${KEY_FILE}] http://ppa.moosefs.com/moosefs-3/apt/${DISTRIBUTION}/${EDITION_CODENAME} ${EDITION_CODENAME} main" > "${REPO_FILE}"
fi

apt update

case "${MOOSE_ROLE}" in
  client)
    apt install -y moosefs-client
    ;;
  master)
    apt install -y moosefs-master moosefs-cgi moosefs-cgiserv moosefs-cli moosefs-client
    ;;
  metalogger)
    apt install -y moosefs-metalogger moosefs-client
    ;;
  chunkserver)
    apt install -y moosefs-chunkserver moosefs-client
    ;;
  *)
    error_msg "Invalid role detected '${MOOSE_ROLE}', something must have gone wrong."
    ;;
esac
